---
title: "Take-home Exercise - Application of Spatial Point Patterns Analysis"
subtitle: "Discover the geographical distribution of functional and non-function water points in Osun State, Nigeria"

author: "Pierre HAAS"

date: "February 18, 2023"
date-modified: "`r Sys.Date()`"

execute:
  eval: true
  echo: true
  warning: false
editor: visual

number-sections: true
---

# Getting started

## Installing and Loading Packages

We use the pacman library and its very useful function p_load() to install and load all the libraries that we will be using.

```{r}
pacman::p_load(sf, sfdep, tmap, plyr, tidyverse, readxl, magrittr, knitr, plotly, Kendall, tidyr)
```

For the purpose of our assignment, we will be using the following libraries:

sf, sfdep, tmap, plyr, tidyverse, readxl, magrittr, knitr, plotly, Kendall, tidyr

## Retrieve the data from the web

For the purpose of this hands-on exercise, we should retrieve the aspatial data [here](https://riwayat-file-vaksinasi-dki-jakarta-jakartagis.hub.arcgis.com/). For the aspatial data, you should download the end of month vaccination data starting in June 2021 to end of June 2022. You should also retrieve the geospatial data [here](https://drive.google.com/open?id=1vBq3vi9Kl-sXlIapQYrQccIVpkWXBMbb).

# Importing data

We will import the data in two steps, first the geospatial data and then the aspatial data.

## Geospatial data

We import the geospatial data using the st_read() function of the sf package.

```{r}
dki = st_read(dsn = "data/geospatial",
             layer = "BATAS_DESA_DESEMBER_2019_DUKCAPIL_DKI_JAKARTA")
```

This sf data frame contains Multipolygon geometry type. The data seems to be encoded in WGS 84, we will need to perform a transformation the projected system of Indonesia and Jakarta.

### Data exploration

Let's take a peak into the data frame using the glimpse() function.

```{r}
glimpse(dki)
```

Looking at the above fields, it seems that we are only interested in the first nine columns. We will be selecting them using the select() function.

Note that the geometry field will remain even if not selected.

```{r}
dki = dki %>%
  select(c(1:9)) %>%
  rename("GeoCode" = 2)
```

For the purpose of this hands-on exercise and easier processes later, I take the freedom to rename the second column 'KODE_DESA' to 'GeoCode'. We will be using this column later, so renaming it in this way will make our analysis and work easier to understand.

#### Transform CRS

We shall check the encoded CRS. We use the st_crs() function of the sf package to do so.

```{r}
dki %>%
  st_crs()
```

Looks like the CRS code is 4326, which corresponds to WGS 84. Using st_transform(), we can transform our geometry data to the Indonesian coordinate system. Here, based on my research, I found that Indonesia uses DGN 95, which has the corresponding ESPG code: 23837.

```{r}
dki = dki %>%
  st_transform(crs=23837)
```

```{r}
dki %>%
  st_crs()
```

The transformation is successful.

#### Check NA values and duplicates

We shall now check for NA values and duplicates. I suspect the latter one should not appear to be problematic, however, we may find NA values.

Using the any() and is.na() function, we scan for NA values.

```{r}
any(is.na(dki))
```

It looks like we have missing information. We shall look into it using the following code chunk.

```{r}
dki[is.na(dki$DESA_KELUR),]
```

The Kelurahan information seems to be missing. We will be using the DESA and GeoCode to cross check with the aspatial data what may be the name to fill in the rows. We could consider dropping these two rows now, but I prefer to wait and confirm before dropping NA values.

In regards to the duplicates, let's confirm our intuition.

```{r}
any(duplicated(dki))
```

There is no duplicated information.

## Aspatial data

Since we need to merge a series of data sets, we will first take a quick look a them to understand what are the relevant fields for our analysis and what work needs to be performed to have one single data set that will allow us to find the monthly vaccination rate.

The first step is to look at the data set of June 2021. Even though this data set takes record of data from the month prior our analysis period (July 2021 - June 2022) and does not seem relevant, I still think that it is important to compute the monthly vaccination (in dosis administered) and consequently we start with the data of June 2021.

```{r}
vaccination = read_excel("data/aspatial/before.xlsx")
glimpse(vaccination)
```

Using the glimpse() function we can take a look at the different fields of the data sets that will be imported next. Looking at the fields, it looks like we will be selecting 4 fields:

-   *KODE KELURAHAN*; this field gives information about the sub-district geographic code

-   *KELURAHAN*; this field gives information about the sub-district

-   *SASARAN*; this field represents the vaccination target of each sub-district

-   *BELUM VAKSIN*; this field informs about the population that is yet-to-be vaccinated

Before moving on with the examination of the aspatial data, we shall quickly check for the missing values found in the previous data frame.

Using the GeoCode of the two previously identified points in the dki sf data frame, we look for similar information in the vaccination data frame.

```{r}
vaccination %>%
  filter(`KODE KELURAHAN` == 31888888)
```

There are no points that cross match. We also may want to check based on the name and will be looking for cells that may contain the DANAU string.

```{r}
vaccination %>%
  filter(grepl('Danau', KELURAHAN))
```

It seems like we can drop the two rows from the dki data set, however, for the purpose of our analysis, I prefer to keep these two sub-districts in the data frame. We may have missing values in our choropleth maps, but it is no problem.

Please find the code chunk necessary to drop NA values in case you deem it to be necessary to do so now.

```{r}
#| eval: false
dki = na.omit(dki)
```

### Data Selection

We shall now select the information as stated previously. We select only the four relevant fields and take care of renaming them. We also add a fifth column that indicates the date that corresponds with each data points. Since we are looking at a time series, i consider that it is a great way of handling our data.

```{r}
vaccination = vaccination %>%
  select(1, 4, 5, 6) %>%
  rename("GeoCode" = 1, "Target" = 3, "Yet-to-be Vaccinated" = 4)

vaccination$Date = as.Date("2021-06-30")
```

Using str() we check that the date data in correctly encoded as a date class.

```{r}
str(vaccination)
```

It seems like we are good to go.

Now that we have taken a look at the data and selected the relevant fields, we can move on with the data cleaning and merge the vaccination data from July 2021 to June 2022 into the vaccination data frame.

To do so, we will be using a simple for loop in which we will be performing the following tasks:

-   Read through the twelve data sets

-   Select the relevant fields and rename them

-   Create the appropriate date column

-   Merge the newly imported data frame and previously existing data frame

```{r}
#| warning: false

months = c('July', 'August', 'September', 'October', 
           'November', 'December', 'January', 'February', 
           'March', 'April', 'May', 'June')

records = seq(from = as.Date("2021-08-01"), to = as.Date("2022-07-01"), by = 'months') - 1

count = 1

for (i in months){
  filename = paste("data/aspatial/", i, ".xlsx", sep = "")
  
  df = read_excel(filename) %>% 
    select(1,4,5,6) %>%
    rename("GeoCode" = 1, "Target" = 3, "Yet-to-be Vaccinated" = 4)
  
  df$Date = records[count]
  count = count + 1
  
  vaccination = rbind(vaccination, df)
}
```

Before merging the aspatial data and geospatial data, we will perform some additional data exploration and look for any potential duplicates or missing values.

### Data exploration

We will begin our data exploration by looking at the vaccination target columns. I have an intuition that vaccination target data might be the same across some months of our analysis period. To do so, we select only the columns that contain the string Target using the *grep()* function.

```{r}
vaccination[grep('TOTAL', vaccination$KELURAHAN),]
```

It looks like the vaccination target data is the same across our analysis period, but differed in the month prior. We won't drop the June 2021 data yet but will do so as soon as we have computed the monthly vaccination rate.

Now, we will look for any potential NA values. We shall use the code chunk below to check for them.

```{r}
any(is.na(vaccination))
```

There are no missing values in the data frame, we will now merge the data frames.

# Merging the data

## Compute the Monthly Vaccination Rate before merging

Since our data is merged vertically, to compute the monthly vaccination rate per region, we will need to order the regions per name. To do so, we use the function order().

```{r}
vac1 = vaccination[order(vaccination$KELURAHAN),]
head(vac1)
```

Now that the data is correctly organized, we can compute the rate in the following manner. I interpret the monthly vaccination rate as the number of persons vaccinated during a month over the target vaccination for the sub-district population. Given this formula, we compute the monthly vaccination rate in the following manner.

```{r}
vac1["Monthly_vac_rate"] = (lag(vac1[,4]) - vac1[, 4]) / vac1$Target
head(vac1)
```

However, before continuing our work, we should drop the June 2021 data. We do so using the code chunk below.

```{r}
vac1 = vac1 %>%
  filter(!grepl(as.Date("2021-06-30"), Date))
```

The last step before merging the data frames is to check if all the merging fields correspond to each other.

## Merging the data frames

```{r}
c(setdiff(vac1$GeoCode, dki$GeoCode), setdiff(dki$GeoCode, vac1$GeoCode))
```

It looks like we have some NA field in one of the two GeoCode columns. Since we had thoughrouly inspected the dki data frame, I suspect that it may come from the vac1 data frame.

```{r}
vac1[is.na(vac1$GeoCode),]
```

We shall drop the TOTAL information about vaccination in Jakarta.

```{r}
vac1 = vac1 %>%
  filter(!grepl('TOTAL', KELURAHAN))
```

```{r}
c(setdiff(vac1$GeoCode, dki$GeoCode), setdiff(dki$GeoCode, vac1$GeoCode))
```

We still have one field that does not match that was detected previously, however, we will not remove yet.

We can finally merge the data frames. Since both have the GeoCode column, the merging should be smooth.

```{r}
dataMerged = merge(dki, vac1,
             all = TRUE)
```

## Data visualization

Before merging the data, we shall plot the sf data using the tmap package and its qtm() function. It can help us visualize the geography of our work.

```{r}
tmap_mode("plot")
qtm(dataMerged)
```

It looks like the Pulau Islands are included in our data frame, however, we only want the focus on the Jakarta region. We will take the necessary steps to remove them from the sf data frame.

Using the filter() and grepl() function, we can remove all rows that contain the string 'PULAU' in its column DESA_KELUR.

```{r}
dataMerged = dataMerged %>% 
  filter(!grepl('PULAU', KELURAHAN))
```

```{r}
tmap_mode("plot")
qtm(dataMerged)
```

It looks like we have removed them successfully.

## Data cleaning

```{r}
head(dataMerged)
```

We will remove some un-interesting fields.

```{r}
dataMerged = dataMerged %>%
  select(-c(2:7, 9))
```

We now check for duplicates.

```{r}
any(duplicated(dataMerged))
```

There aren't any duplicates. We check for empty geometry fields in case the merge didn't go as planned.

```{r}
any(st_is_empty(dataMerged))
```

It looks like our data frame dataMerged is now cleaned. We can now move on to the first objective of this assignment, the Choropleth Mapping.

# Choropleth Mapping and Analysis

Objectives of this section:

-   Compute the monthly vaccination rate from July 2021 to June 2022 at sub-district (also known as kelurahan in Bahasa Indonesia) level,

-   Prepare the monthly vaccination rate maps by using appropriate tmap functions,

-   Describe the spatial patterns revealed by the choropleth maps (not more than 200 words).

## Monthly Vaccination Rate Computation

Since we have already taken care of it, no need to perform the computation again, however, I provide a sneak peak into the data.

```{r}
sample_n(dataMerged, 10)
```

## Choropleth maps for Monthly Vaccination Rate

We will now use the tmap package to plot Monthly Vaccination Rate Choropleth maps. Using the tm_facets() function we can specify that we would like to plot a map for every date provided in the data. In this way, no need to create complex functions or loops.

```{r}
#| eval: false
#| code-fold: true
#| code-summary: Show code

tm_shape(dataMerged) +
  tm_fill("Monthly_vac_rate",
          style = "jenks",
          palette = "Blues") + 
  tm_facets(by="Date", 
            free.coords=TRUE) +
  tm_layout(title.position = c("center", "center"), 
            title.size = 20) +
  tm_borders(alpha = 0.5)
```

It seems like we are getting back an error. It looks to me that it may be due to the empty field identified in the dki data frame. We will remove it now.

```{r}
#| column: page

tm_shape(na.omit(dataMerged)) +
  tm_fill("Monthly_vac_rate",
          style = "fisher",
          palette = "Blues") + 
  tm_facets(by="Date") +
  tm_layout(title.position = c("center", "center")) +
  tm_borders(alpha = 0.5)
```

## Conclusion

Looking at the previous section choropleth maps, a clear pattern appears. It looks like the monthly vaccination rate rapidly increased across the 2021 summer reaching peaks of about 20% monthly vaccination, however, not all sub-districts vaccinated at the same pace. Indeed, we find a few sub-districts that still had a vaccination rate close to zero during the summer. Following this summer vaccination peak, we find that due to already quite high levels of vaccination, the monthly vaccination rate decreased at a steady pace towards a 0% monthly vaccination rate.

As 2022 began, Jakarta sub-districts had a vaccination rate of approximately:

```{r}
#| code-fold: true
#| code-summary: Show code

quick_computation = dataMerged %>%
  filter(grepl("2022-01-31", Date))
  
mean((1 - (quick_computation$`Yet-to-be Vaccinated` / quick_computation$Target)))
```

83% for its target population. We find it quite understandable that the monthly vaccination rate started decreasing towards 0%. I don't find any meaningful information to extract past January 2022.

# Local Gi\* Analysis

Objectives of this section:

-   Compute local Gi\* values of the monthly vaccination rate,

-   Display the Gi\* maps of the monthly vaccination rate. The maps should only display the significant (i.e. p-value \< 0.05),

-   With reference to the analysis results, draw statistical conclusions (not more than 250 words).

## Compute local Gi\* values

The first step to computing local Gi\* values is to create a spacetime cube with our aspatial and geospatial data.

### Convertion to spacetime cube

We will create a space time cube since we are looking at values in a time series. Using hte spacetime() function, we can combine the vac1 and dki data frames into a spacetime cube.

```{r}
dataMerged_st <- spacetime(vac1, dki,
                        .loc_col = "GeoCode",
                        .time_col = "Date")
```

```{r}
is_spacetime_cube(dataMerged_st)
```

IT looks like it did not work. The merged data does not seem to be in the space time cube format. It looks like we should take the NA values out of the dki data frame.

```{r}
dki = na.omit(dki)
```

```{r}
dki = dki %>% 
  filter(!grepl('PULAU', DESA_KELUR)) 
```

```{r}
vac1 = vac1 %>% 
  filter(!grepl('PULAU', KELURAHAN)) 
```

Let's run the code chunk again.

```{r}
dataMerged_st <- spacetime(vac1, dki,
                        .loc_col = "GeoCode",
                        .time_col = "Date")
```

```{r}
is_spacetime_cube(dataMerged_st)
```

It looks like the transformation is successful. Now, we shall continue with the computation of Gi\*.

### Deriving the spatial weights

We need to derive the spatial weights first. We do so using the code chunk below.

```{r}
data_nb <- dataMerged_st %>%
  activate("geometry") %>%
  mutate(nb = include_self(st_contiguity(geometry)),
         wt = st_inverse_distance(nb, geometry,
                                  scale = 1,
                                  alpha = 1),
         .before = 1) %>%
  set_nbs("nb") %>%
  set_wts("wt")
```

### Compute Gi\* values

We have now the sufficient variables to compute the local Gi\* values. Using the local_gstar_perm() function, we compute Gi\* values.

```{r}
gi_stars <- data_nb %>% 
  group_by(Date) %>% 
  mutate(gi_star = local_gstar_perm(
    Monthly_vac_rate, nb, wt)) %>% 
  tidyr::unnest(gi_star)
```

```{r}
glimpse(gi_stars)
```

It looks like they were computed correctly.

## Gi\* map of monthly vaccination rate

Since the gi_stars data frame is not in an sf format, we will need to merge it with the dki data frame that contains the geometry information about the sub-districts.

The first step is to remove the PULAU islands from the dki data frame.

```{r}
dki = dki %>% 
  filter(!grepl('PULAU', DESA_KELUR)) 
```

```{r}
qtm(dki)
```

Now that this is done, we need to do the merger. Using the merge() function, we can combine the data frames.

```{r}
gi_sf = merge(dki, gi_stars)
```

We should be able to create a map now with the p-values contained in the merged data frame.

```{r}
tm_shape(gi_sf) +
  tm_fill("p_value") + 
  tm_facets("Date") +
  tm_layout(title.position = c("center", "center")) +
  tm_borders(alpha = 0.5)
```

Since we want to observe the regions with p-values below 0.05, we need to use the following code chunk.

```{r}
#| column: page
gi_sf_bis = gi_sf
gi_sf_bis$p_value = ifelse(gi_sf_bis$p_value < 0.05, gi_sf_bis$p_value, NA)

tm_shape(gi_sf_bis) +
  tm_fill("p_value") + 
  tm_facets("Date") +
  tm_layout(title.position = c("center", "center")) +
  tm_borders(alpha = 0.5)
```

We can also take a look at the distribution of gi\* values on a map.

```{r}
tm_shape(gi_sf) +
  tm_fill("gi_star") + 
  tm_facets("Date") +
  tm_layout(title.position = c("center", "center")) +
  tm_borders(alpha = 0.5)
```

## Conclusion

Looking back at the analysis performed in the previous section, it seems that, by observing the gi\* values map, we have prevalent signs of clustering. Indeed, the latest map that we have plotted shows some sub-districts with similar gi\* values. We can look at the significance of these results by cross checking with our map that indicates the p-value of our tests. It seems like across time and sub-districts we have clear signs of clustering since we find p-values below 5%, our significance level.

Still looking at the p-value map, it looks like clustering has a tendency to appear and disappear across time. It seems logical given the nature of Covid-19 and its quickness to spread. If we were to look only at one part of the map, e.g., the North-East, it looks like we have clusters of both low and high vaccination rates. Indeed, in September and October 2021, we find negative values of gi\*, meaning that the vaccination rate was quite low, and significant results to our tests. However, it looks like a few months later, the tendency reversed as we find high gi\* values, meaning that the monthly vaccination rate was now quite high.

If we look at the reality of things, a low vaccination rate implies higher covid cases which pushes people to get vaccinated. Now, as people get vaccinated, covid cases decrease and people get less vaccinated. So, it seems understandable that we can observe such patterns.

# Emerging Hot Spot Analysis (EHSA)

Objectives of this section:

-   Perform Mann-Kendall Test by using the spatio-temporal local Gi\* values,

-   Select three sub-districts and describe the temporal trends revealed (not more than 250 words),

-   Prepared a EHSA map of the Gi\* values of vaccination rate. The maps should only display the significant (i.e. p-value \< 0.05),

-   With reference to the EHSA map prepared, describe the spatial patterns revealed (not more than 250 words).

## Mann-Kendall Test

The first step to performing the Mann-Kendall test is to select the necessary columns.

```{r}
cbg <- gi_stars %>% 
  ungroup() %>%
  select(KELURAHAN, Date, gi_star)
```

Now, using ggplot and ploty packages, we create an interactive plot to assess the trends in our data.

```{r}
plt <- ggplot(data = cbg, 
       aes(x = Date, 
           y = gi_star)) +
  geom_line() +
  theme_light()

ggplotly(plt)
```

Looking at the above plot, it does not seem like there are any clear trends. We will perform more thorough tests to assess the statistical significance of any potential trends.

```{r}
cbg %>%
  summarise(mk = list(unclass(
      Kendall::MannKendall(gi_star)))) %>% 
  tidyr::unnest_wider(mk)
```

Looking at the sl value, it seems like our p-value is above our 5% significance level, meaning that we fail to reject our null hypothesis and that over Jakarta globally, there is no monotonic trend in the vaccination rate over our time series.

## Temporal Trends in Ancol, Lagoa, and Serdang

Using the code chunk below, we perform the Mann-Kendall test on these three sub-districts: Ancol, Lagoa, and Serdang.

```{r}
sub_districts = c("ANCOL", "LAGOA", "SERDANG")

gi_stars_bis = gi_stars %>%
  filter(KELURAHAN %in% sub_districts)

gi_stars_bis %>%
  group_by(KELURAHAN) %>%
  summarise(mk = list(
    unclass(
      Kendall::MannKendall(gi_star)))) %>%
  tidyr::unnest_wider(mk)
```

Looking at the above table, we find that our three sub-districts are quite different. The first two, being Ancol and Lagoa, have trends that are statistically insignificant given our significance level. They show insignificant hot spot. On the other hand, Serdang has a quite significant cold trend. The p-value is below 5%.

## EHSA map of Gi\* values

```{r}
ehsa = emerging_hotspot_analysis(
  x = dataMerged_st, 
  .var = "Monthly_vac_rate", 
  k = 1, nsim = 99)
```

```{r}
dki_ehsa <- dki %>%
  left_join(ehsa, by = c("GeoCode" = "location"))
```

```{r}
#| eval: false
ehsa_sig <- dki_ehsa  %>%
  filter(p_value < 0.05)
tmap_mode("plot")
tm_shape(dki_ehsa) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(ehsa_sig) +
  tm_fill("classification") + 
  tm_borders(alpha = 0.4)
```

## Spatial Patterns description

Our analysis gives us very little to interpret. It looks like there are no sub-districts with significant trends. I would say that this is due to the unpredictability of the covid crisis and its management.
