[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise - Session 1: Geospatial Data Wrangling with R",
    "section": "",
    "text": "In this section, I will install and load the required R packages, being tidyverse and sf libraries/packages. Here we use the pacman library to install and load the libraries in case it is needed.\n\npacman::p_load(tidyverse, sf)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#import-data-in-shp-file-format",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#import-data-in-shp-file-format",
    "title": "Hands-on Exercise - Session 1: Geospatial Data Wrangling with R",
    "section": "1.2.1 Import data in shp file format",
    "text": "1.2.1 Import data in shp file format\nHere we use the function st_read to read the files stored under the shp format.\n\nmpsz <- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\p-haas\\IS415\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\ncpg <- st_read(dsn = \"data/geospatial\", \n                layer = \"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `C:\\p-haas\\IS415\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2248 features and 0 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42626.09 ymax: 48948.15\nCRS:           NA"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#import-data-in-kml-format",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#import-data-in-kml-format",
    "title": "Hands-on Exercise - Session 1: Geospatial Data Wrangling with R",
    "section": "1.2.2 Import data in kml format",
    "text": "1.2.2 Import data in kml format\nHere we use the function st_read to read the files stored under the kml format. Note that in this second case, we do not include the layer in the code.\n\npsl <- st_read(dsn = \"data/geospatial/preschools-location.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\p-haas\\IS415\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial\\preschools-location.kml' \n  using driver `KML'\nSimple feature collection with 1925 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-st_geometry",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-st_geometry",
    "title": "Hands-on Exercise - Session 1: Geospatial Data Wrangling with R",
    "section": "1.3.1 Working with st_geometry()",
    "text": "1.3.1 Working with st_geometry()\nNote that st_geometry() can be replaced by mpsz$geometry or mpsz[[1]]\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nNotice that the print only displays basic information of the feature class such as type of geometry, the geographic extent of the features and the coordinate system of the data."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-glimpse",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-glimpse",
    "title": "Hands-on Exercise - Session 1: Geospatial Data Wrangling with R",
    "section": "1.3.2 Working with glimpse()",
    "text": "1.3.2 Working with glimpse()\nThe function glimpse() reports information about the data type of every column or field.\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-head",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-head",
    "title": "Hands-on Exercise - Session 1: Geospatial Data Wrangling with R",
    "section": "1.3.3 Working with head()",
    "text": "1.3.3 Working with head()\nThe function prints the first five rows of the dataset.\n\nhead(mpsz, n=5)\n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30..."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting---polygon-feature",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting---polygon-feature",
    "title": "Hands-on Exercise - Session 1: Geospatial Data Wrangling with R",
    "section": "1.4.1 Plotting - Polygon Feature",
    "text": "1.4.1 Plotting - Polygon Feature\n\nplot(mpsz)\n\n\n\n\nThe default plot of an sf object is a multi-plot of all attributes, up to a reasonable maximum as shown above. We can, however, choose to plot only the geometry by using the code chunk below.\n\nplot(st_geometry(mpsz))\n\n\n\n\nAlternatively, we can also choose the plot the sf object by using a specific attribute as shown in the code chunk below.\n\nplot(mpsz[\"PLN_AREA_N\"])"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting---polyline-feature",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting---polyline-feature",
    "title": "Hands-on Exercise - Session 1: Geospatial Data Wrangling with R",
    "section": "1.4.2 Plotting - Polyline Feature",
    "text": "1.4.2 Plotting - Polyline Feature\n\nplot(cpg)\n\n\n\n\n\nplot(st_geometry(cpg))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting---multipoint-feature",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting---multipoint-feature",
    "title": "Hands-on Exercise - Session 1: Geospatial Data Wrangling with R",
    "section": "1.4.3 Plotting - Multipoint Feature",
    "text": "1.4.3 Plotting - Multipoint Feature\n\nplot(psl)\n\n\n\n\n\nplot(st_geometry(psl))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-data-in-csv-format",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-data-in-csv-format",
    "title": "Hands-on Exercise - Session 1: Geospatial Data Wrangling with R",
    "section": "1.6.1 Importing data in csv format",
    "text": "1.6.1 Importing data in csv format"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "title": "Hands-on Exercise - Choropleth Mapping with R",
    "section": "",
    "text": "In this section, I will install and load the required R packages, tidyverse, sf, and tmap packages. Here we use the pacman library to install and load the packages at once.\n\npacman::p_load(tidyverse, sf, tmap, stringr)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#importing-geospatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#importing-geospatial-data",
    "title": "Hands-on Exercise - Choropleth Mapping with R",
    "section": "2.1 Importing Geospatial Data",
    "text": "2.1 Importing Geospatial Data\n\nmpsz <- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\p-haas\\IS415\\Hands-on_Ex\\Hands-on_Ex03\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#importing-attribute-data-into-r",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#importing-attribute-data-into-r",
    "title": "Hands-on Exercise - Choropleth Mapping with R",
    "section": "2.2 Importing Attribute Data into R",
    "text": "2.2 Importing Attribute Data into R\n\npopdata <- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\") %>%\n  filter(Time==2020)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#data-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#data-wrangling",
    "title": "Hands-on Exercise - Choropleth Mapping with R",
    "section": "3.1 Data Wrangling",
    "text": "3.1 Data Wrangling\n\npopdata2020 <- popdata %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(`POP` = sum(`Pop`)) %>%\n  ungroup()%>%\n  pivot_wider(names_from=AG, \n              values_from=POP) %>%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %>%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%>%\nmutate(`AGED`=rowSums(.[16:21])) %>%\nmutate(`TOTAL`=rowSums(.[3:21])) %>%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %>%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#joining-the-geospatial-and-attribute-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#joining-the-geospatial-and-attribute-data",
    "title": "Hands-on Exercise - Choropleth Mapping with R",
    "section": "3.2 Joining the Geospatial and Attribute Data",
    "text": "3.2 Joining the Geospatial and Attribute Data\n\npopdata2020 <- popdata2020 %>%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = funs(toupper)) %>%\n  filter(`ECONOMY ACTIVE` > 0)\n\n\nmpsz_pop2020 <- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\n\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#quickly-plot-a-choropleth-map-with-qtm-function",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#quickly-plot-a-choropleth-map-with-qtm-function",
    "title": "Hands-on Exercise - Choropleth Mapping with R",
    "section": "4.1 Quickly plot a choropleth map with qtm() function",
    "text": "4.1 Quickly plot a choropleth map with qtm() function\n\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#creating-a-choropleth-map-using-tmaps-elements",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#creating-a-choropleth-map-using-tmaps-elements",
    "title": "Hands-on Exercise - Choropleth Mapping with R",
    "section": "4.2 Creating a choropleth map using tmap’s elements",
    "text": "4.2 Creating a choropleth map using tmap’s elements\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n4.2.1 Drawing a base map\n\ntm_shape(mpsz_pop2020) + \n  tm_polygons()\n\n\n\n\n\n\n4.2.2 Drawing a choropleth map using tm_polygons()\n\ntm_shape(mpsz_pop2020) + \n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\n4.2.3 Drawing a choropleth map using tm_fill() and tm_border()\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1, alpha = 1)\n\n\n\n\nN.B. Some important things to note about the tm_fill() function:\nThe alpha argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).\nBeside alpha argument, there are three other arguments for tm_borders(), they are:\n\ncol = border colour,\nlwd = border line width. The default is 1, and\nlty = border line type. The default is “solid”."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#data-classification-methods-of-tmap",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#data-classification-methods-of-tmap",
    "title": "Hands-on Exercise - Choropleth Mapping with R",
    "section": "4.3 Data classification methods of tmap",
    "text": "4.3 Data classification methods of tmap\n\n4.3.1 Plotting choropleth maps using built-in classification methods\nThe code chunk below shows a quantile data classification that used 5 classes. In order words, we specify using the jenks method with 5 classes.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nIn the code chunk below, equal data classification method is used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n4.3.1.1 DIY - Test new classification methods\nIn this section, I tested two classification methods, namely quantile and sd.\n\n\nShow the code\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 2,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 10,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 20,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n(a) Two classes\n\n\n\n\n\n\n\n(b) Six classes\n\n\n\n\n\n\n\n\n\n(c) Ten classes\n\n\n\n\n\n\n\n(d) Twenty classes\n\n\n\n\nFigure 1: Quantile Distribution of Dependency Ratio by Planning Subzone.\n\n\n\n\n\nShow the code\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 2,\n          style = \"sd\") +\n  tm_borders(alpha = 0.5)\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"sd\") +\n  tm_borders(alpha = 0.5)\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 10,\n          style = \"sd\") +\n  tm_borders(alpha = 0.5)\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 20,\n          style = \"sd\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n(a) Two classes\n\n\n\n\n\n\n\n(b) Six classes\n\n\n\n\n\n\n\n\n\n(c) Ten classes\n\n\n\n\n\n\n\n(d) Twenty classes\n\n\n\n\nFigure 2: Standard Deviation Distribution of Dependency Ratio by Planning Subzone.\n\n\n\n\n\n\n4.3.2 Plotting choropleth maps with custom break\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.6519  0.7025  0.7742  0.7645 19.0000      92 \n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#colour-scheme",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#colour-scheme",
    "title": "Hands-on Exercise - Choropleth Mapping with R",
    "section": "4.4 Colour Scheme",
    "text": "4.4 Colour Scheme\n\n4.4.1 Using ColourBrewer palette\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#map-layouts",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#map-layouts",
    "title": "Hands-on Exercise - Choropleth Mapping with R",
    "section": "4.5 Map Layouts",
    "text": "4.5 Map Layouts\n\n4.5.1 Map Legend\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n4.5.2 Map Style\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\n\n\n\n\n\n4.5.3 Cartographic Furniture\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\nTo reset the default style, refer to the code chunk below.\n\ntmap_style(\"white\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#drawing-small-multiple-choropleth-maps",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#drawing-small-multiple-choropleth-maps",
    "title": "Hands-on Exercise - Choropleth Mapping with R",
    "section": "4.6 Drawing Small Multiple Choropleth Maps",
    "text": "4.6 Drawing Small Multiple Choropleth Maps\n\n4.6.1 By assigning multiple values to at least one of the aesthetic arguments\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\n\n\n\n\n\n4.6.2 By defining a group-by variable in tm_facets()\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n4.6.3 By creating multiple stand-alone maps with tmap_arrange()\n\nyoungmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#mapping-spatial-object-meeting-a-selection-criterion",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#mapping-spatial-object-meeting-a-selection-criterion",
    "title": "Hands-on Exercise - Choropleth Mapping with R",
    "section": "4.7 Mapping Spatial Object Meeting a Selection Criterion",
    "text": "4.7 Mapping Spatial Object Meeting a Selection Criterion\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "title": "Hands-on Exercise - 1st Order Spatial Point Patterns Analysis",
    "section": "",
    "text": "pacman::p_load(maptools, sf, raster, spatstat, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#importing-the-spatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#importing-the-spatial-data",
    "title": "Hands-on Exercise - 1st Order Spatial Point Patterns Analysis",
    "section": "2.1 Importing the spatial data",
    "text": "2.1 Importing the spatial data\n\nchildcare_sf <- st_read(\"data/child-care-services-geojson.geojson\") %>%\n  st_transform(crs = 3414)\n\nReading layer `child-care-services-geojson' from data source \n  `C:\\p-haas\\IS415\\Hands-on_Ex\\Hands-on_Ex04\\data\\child-care-services-geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1545 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nsg_sf <- st_read(dsn = \"data\", layer=\"CostalOutline\")\n\nReading layer `CostalOutline' from data source \n  `C:\\p-haas\\IS415\\Hands-on_Ex\\Hands-on_Ex04\\data' using driver `ESRI Shapefile'\nSimple feature collection with 60 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\nProjected CRS: SVY21\n\n\n\nmpsz_sf <- st_read(dsn = \"data\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\p-haas\\IS415\\Hands-on_Ex\\Hands-on_Ex04\\data' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\n2.1.1 DIY\n\nst_crs(sg_sf)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\n\nst_crs(mpsz_sf)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\n\nsg_sf = sg_sf %>%\n  st_set_crs(3414)\n\nmpsz_sf = mpsz_sf %>%\n  st_set_crs(3414)\n\n\nmpsz_sf\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29..."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#mapping-the-geospatial-data-sets",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#mapping-the-geospatial-data-sets",
    "title": "Hands-on Exercise - 1st Order Spatial Point Patterns Analysis",
    "section": "2.2 Mapping the geospatial data sets",
    "text": "2.2 Mapping the geospatial data sets\n\ntmap_mode('plot')\ntm_shape(mpsz_sf)+\n  tm_borders()+\n  tm_fill()+\n  tm_shape(childcare_sf)+\n  tm_dots()\n\n\n\n\n\ntmap_mode('view')\ntm_shape(childcare_sf)+\n  tm_dots()\n\n\n\n\n\n\n\ntmap_mode('plot')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#converting-sf-data-frames-to-sps-spatial-class",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#converting-sf-data-frames-to-sps-spatial-class",
    "title": "Hands-on Exercise - 1st Order Spatial Point Patterns Analysis",
    "section": "3.1 Converting sf data frames to sp’s Spatial* class",
    "text": "3.1 Converting sf data frames to sp’s Spatial* class\n\nchildcare <- as_Spatial(childcare_sf)\nmpsz <- as_Spatial(mpsz_sf)\nsg <- as_Spatial(sg_sf)\n\n\nchildcare\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 2\nnames       :    Nameescription \nmin values  :   kml_1, <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSBLOCKHOUSENUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSBUILDINGNAME</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSPOSTALCODE</th> <td>018989</td> </tr><tr bgcolor=\"\"> <th>ADDRESSSTREETNAME</th> <td>1, MARINA BOULEVARD, #B1 - 01, ONE MARINA BOULEVARD, SINGAPORE 018989</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSTYPE</th> <td></td> </tr><tr bgcolor=\"\"> <th>DESCRIPTION</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>HYPERLINK</th> <td></td> </tr><tr bgcolor=\"\"> <th>LANDXADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>LANDYADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"\"> <th>NAME</th> <td>THE LITTLE SKOOL-HOUSE INTERNATIONAL PTE. LTD.</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>PHOTOURL</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSFLOORNUMBER</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>08F73931F4A691F4</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200826094036</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSUNITNUMBER</th> <td></td> </tr></table></center> \nmax values  : kml_999,                  <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSBLOCKHOUSENUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSBUILDINGNAME</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSPOSTALCODE</th> <td>829646</td> </tr><tr bgcolor=\"\"> <th>ADDRESSSTREETNAME</th> <td>200, PONGGOL SEVENTEENTH AVENUE, SINGAPORE 829646</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSTYPE</th> <td></td> </tr><tr bgcolor=\"\"> <th>DESCRIPTION</th> <td>Child Care Services</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>HYPERLINK</th> <td></td> </tr><tr bgcolor=\"\"> <th>LANDXADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>LANDYADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"\"> <th>NAME</th> <td>RAFFLES KIDZ @ PUNGGOL PTE LTD</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>PHOTOURL</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSFLOORNUMBER</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>379D017BF244B0FA</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200826094036</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSUNITNUMBER</th> <td></td> </tr></table></center> \n\n\n\nmpsz\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 323 \nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 15\nnames       : OBJECTID, SUBZONE_NO, SUBZONE_N, SUBZONE_C, CA_IND, PLN_AREA_N, PLN_AREA_C,       REGION_N, REGION_C,          INC_CRC, FMEL_UPD_D,     X_ADDR,     Y_ADDR,    SHAPE_Leng,    SHAPE_Area \nmin values  :        1,          1, ADMIRALTY,    AMSZ01,      N, ANG MO KIO,         AM, CENTRAL REGION,       CR, 00F5E30B5C9B7AD8,      16409,  5092.8949,  19579.069, 871.554887798, 39437.9352703 \nmax values  :      323,         17,    YUNNAN,    YSSZ09,      Y,     YISHUN,         YS,    WEST REGION,       WR, FFCCF172717C2EAF,      16409, 50424.7923, 49552.7904, 68083.9364708,  69748298.792 \n\n\n\nsg\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 4\nnames       : GDO_GID, MSLINK, MAPID,              COSTAL_NAM \nmin values  :       1,      1,     0,             ISLAND LINK \nmax values  :      60,     67,     0, SINGAPORE - MAIN ISLAND"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#converting-the-spatial-class-into-generic-sp-format",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#converting-the-spatial-class-into-generic-sp-format",
    "title": "Hands-on Exercise - 1st Order Spatial Point Patterns Analysis",
    "section": "3.2 Converting the Spatial* class into generic sp format",
    "text": "3.2 Converting the Spatial* class into generic sp format\n\nchildcare_sp <- as(childcare, \"SpatialPoints\")\nsg_sp <- as(sg, \"SpatialPolygons\")\n\n\nchildcare_sp\n\nclass       : SpatialPoints \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#converting-the-generic-sp-format-into-spatstats-ppp-format",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#converting-the-generic-sp-format-into-spatstats-ppp-format",
    "title": "Hands-on Exercise - 1st Order Spatial Point Patterns Analysis",
    "section": "3.3 Converting the generic sp format into spatstat’s ppp format",
    "text": "3.3 Converting the generic sp format into spatstat’s ppp format\n\nchildcare_ppp <- as(childcare_sp, \"ppp\")\nchildcare_ppp\n\nPlanar point pattern: 1545 points\nwindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n\n\n\nplot(childcare_ppp)\n\n\n\n\n\nsummary(childcare_ppp)\n\nPlanar point pattern:  1545 points\nAverage intensity 1.91145e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nWindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n                    (34200 x 23630 units)\nWindow area = 808287000 square units"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#handling-duplicated-points",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#handling-duplicated-points",
    "title": "Hands-on Exercise - 1st Order Spatial Point Patterns Analysis",
    "section": "3.4 Handling duplicated points",
    "text": "3.4 Handling duplicated points\n\nany(duplicated(childcare_ppp))\n\n[1] TRUE\n\n\n\nsum(multiplicity(childcare_ppp) > 1)\n\n[1] 128\n\n\n\nchildcare_ppp_jit <- rjitter(childcare_ppp, \n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\n\n\nany(duplicated(childcare_ppp_jit))\n\n[1] FALSE"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#creating-owin-object",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#creating-owin-object",
    "title": "Hands-on Exercise - 1st Order Spatial Point Patterns Analysis",
    "section": "3.5 Creating owin object",
    "text": "3.5 Creating owin object\n\nsg_owin = as(sg_sp, \"owin\")\n\n\nplot(sg_owin)\n\n\n\n\n\nsummary(sg_owin)\n\nWindow: polygonal boundary\n60 separate polygons (no holes)\n            vertices        area relative.area\npolygon 1         38 1.56140e+04      2.09e-05\npolygon 2        735 4.69093e+06      6.27e-03\npolygon 3         49 1.66986e+04      2.23e-05\npolygon 4         76 3.12332e+05      4.17e-04\npolygon 5       5141 6.36179e+08      8.50e-01\npolygon 6         42 5.58317e+04      7.46e-05\npolygon 7         67 1.31354e+06      1.75e-03\npolygon 8         15 4.46420e+03      5.96e-06\npolygon 9         14 5.46674e+03      7.30e-06\npolygon 10        37 5.26194e+03      7.03e-06\npolygon 11        53 3.44003e+04      4.59e-05\npolygon 12        74 5.82234e+04      7.78e-05\npolygon 13        69 5.63134e+04      7.52e-05\npolygon 14       143 1.45139e+05      1.94e-04\npolygon 15       165 3.38736e+05      4.52e-04\npolygon 16       130 9.40465e+04      1.26e-04\npolygon 17        19 1.80977e+03      2.42e-06\npolygon 18        16 2.01046e+03      2.69e-06\npolygon 19        93 4.30642e+05      5.75e-04\npolygon 20        90 4.15092e+05      5.54e-04\npolygon 21       721 1.92795e+06      2.57e-03\npolygon 22       330 1.11896e+06      1.49e-03\npolygon 23       115 9.28394e+05      1.24e-03\npolygon 24        37 1.01705e+04      1.36e-05\npolygon 25        25 1.66227e+04      2.22e-05\npolygon 26        10 2.14507e+03      2.86e-06\npolygon 27       190 2.02489e+05      2.70e-04\npolygon 28       175 9.25904e+05      1.24e-03\npolygon 29      1993 9.99217e+06      1.33e-02\npolygon 30        38 2.42492e+04      3.24e-05\npolygon 31        24 6.35239e+03      8.48e-06\npolygon 32        53 6.35791e+05      8.49e-04\npolygon 33        41 1.60161e+04      2.14e-05\npolygon 34        22 2.54368e+03      3.40e-06\npolygon 35        30 1.08382e+04      1.45e-05\npolygon 36       327 2.16921e+06      2.90e-03\npolygon 37       111 6.62927e+05      8.85e-04\npolygon 38        90 1.15991e+05      1.55e-04\npolygon 39        98 6.26829e+04      8.37e-05\npolygon 40       415 3.25384e+06      4.35e-03\npolygon 41       222 1.51142e+06      2.02e-03\npolygon 42       107 6.33039e+05      8.45e-04\npolygon 43         7 2.48299e+03      3.32e-06\npolygon 44        17 3.28303e+04      4.38e-05\npolygon 45        26 8.34758e+03      1.11e-05\npolygon 46       177 4.67446e+05      6.24e-04\npolygon 47        16 3.19460e+03      4.27e-06\npolygon 48        15 4.87296e+03      6.51e-06\npolygon 49        66 1.61841e+04      2.16e-05\npolygon 50       149 5.63430e+06      7.53e-03\npolygon 51       609 2.62570e+07      3.51e-02\npolygon 52         8 7.82256e+03      1.04e-05\npolygon 53       976 2.33447e+07      3.12e-02\npolygon 54        55 8.25379e+04      1.10e-04\npolygon 55       976 2.33447e+07      3.12e-02\npolygon 56        61 3.33449e+05      4.45e-04\npolygon 57         6 1.68410e+04      2.25e-05\npolygon 58         4 9.45963e+03      1.26e-05\npolygon 59        46 6.99702e+05      9.35e-04\npolygon 60        13 7.00873e+04      9.36e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 748741000 square units\nFraction of frame area: 0.414"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#combining-point-events-object-and-owin-object",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#combining-point-events-object-and-owin-object",
    "title": "Hands-on Exercise - 1st Order Spatial Point Patterns Analysis",
    "section": "3.6 Combining point events object and owin object",
    "text": "3.6 Combining point events object and owin object\n\nchildcareSG_ppp = childcare_ppp[sg_owin]\n\n\nsummary(childcareSG_ppp)\n\nPlanar point pattern:  1545 points\nAverage intensity 2.063463e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nWindow: polygonal boundary\n60 separate polygons (no holes)\n            vertices        area relative.area\npolygon 1         38 1.56140e+04      2.09e-05\npolygon 2        735 4.69093e+06      6.27e-03\npolygon 3         49 1.66986e+04      2.23e-05\npolygon 4         76 3.12332e+05      4.17e-04\npolygon 5       5141 6.36179e+08      8.50e-01\npolygon 6         42 5.58317e+04      7.46e-05\npolygon 7         67 1.31354e+06      1.75e-03\npolygon 8         15 4.46420e+03      5.96e-06\npolygon 9         14 5.46674e+03      7.30e-06\npolygon 10        37 5.26194e+03      7.03e-06\npolygon 11        53 3.44003e+04      4.59e-05\npolygon 12        74 5.82234e+04      7.78e-05\npolygon 13        69 5.63134e+04      7.52e-05\npolygon 14       143 1.45139e+05      1.94e-04\npolygon 15       165 3.38736e+05      4.52e-04\npolygon 16       130 9.40465e+04      1.26e-04\npolygon 17        19 1.80977e+03      2.42e-06\npolygon 18        16 2.01046e+03      2.69e-06\npolygon 19        93 4.30642e+05      5.75e-04\npolygon 20        90 4.15092e+05      5.54e-04\npolygon 21       721 1.92795e+06      2.57e-03\npolygon 22       330 1.11896e+06      1.49e-03\npolygon 23       115 9.28394e+05      1.24e-03\npolygon 24        37 1.01705e+04      1.36e-05\npolygon 25        25 1.66227e+04      2.22e-05\npolygon 26        10 2.14507e+03      2.86e-06\npolygon 27       190 2.02489e+05      2.70e-04\npolygon 28       175 9.25904e+05      1.24e-03\npolygon 29      1993 9.99217e+06      1.33e-02\npolygon 30        38 2.42492e+04      3.24e-05\npolygon 31        24 6.35239e+03      8.48e-06\npolygon 32        53 6.35791e+05      8.49e-04\npolygon 33        41 1.60161e+04      2.14e-05\npolygon 34        22 2.54368e+03      3.40e-06\npolygon 35        30 1.08382e+04      1.45e-05\npolygon 36       327 2.16921e+06      2.90e-03\npolygon 37       111 6.62927e+05      8.85e-04\npolygon 38        90 1.15991e+05      1.55e-04\npolygon 39        98 6.26829e+04      8.37e-05\npolygon 40       415 3.25384e+06      4.35e-03\npolygon 41       222 1.51142e+06      2.02e-03\npolygon 42       107 6.33039e+05      8.45e-04\npolygon 43         7 2.48299e+03      3.32e-06\npolygon 44        17 3.28303e+04      4.38e-05\npolygon 45        26 8.34758e+03      1.11e-05\npolygon 46       177 4.67446e+05      6.24e-04\npolygon 47        16 3.19460e+03      4.27e-06\npolygon 48        15 4.87296e+03      6.51e-06\npolygon 49        66 1.61841e+04      2.16e-05\npolygon 50       149 5.63430e+06      7.53e-03\npolygon 51       609 2.62570e+07      3.51e-02\npolygon 52         8 7.82256e+03      1.04e-05\npolygon 53       976 2.33447e+07      3.12e-02\npolygon 54        55 8.25379e+04      1.10e-04\npolygon 55       976 2.33447e+07      3.12e-02\npolygon 56        61 3.33449e+05      4.45e-04\npolygon 57         6 1.68410e+04      2.25e-05\npolygon 58         4 9.45963e+03      1.26e-05\npolygon 59        46 6.99702e+05      9.35e-04\npolygon 60        13 7.00873e+04      9.36e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 748741000 square units\nFraction of frame area: 0.414\n\n\n\nplot(childcareSG_ppp)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#kernel-density-estimation",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#kernel-density-estimation",
    "title": "Hands-on Exercise - 1st Order Spatial Point Patterns Analysis",
    "section": "4.1 Kernel Density Estimation",
    "text": "4.1 Kernel Density Estimation\n\n4.1.1 Computing kernel density estimation using automatic bandwidth selection method\n\nkde_childcareSG_bw <- density(childcareSG_ppp,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\")\nplot(kde_childcareSG_bw)\n\n\n\n\n\n\n4.1.2 Rescalling KDE values\n\nchildcareSG_ppp.km <- rescale(childcareSG_ppp, 1000, \"km\")\n\n\nkde_childcareSG.bw <- density(childcareSG_ppp.km, \n                              sigma=bw.diggle, \n                              edge=TRUE, \n                              kernel=\"gaussian\")\nplot(kde_childcareSG.bw)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#working-with-different-automatic-bandwidth-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#working-with-different-automatic-bandwidth-methods",
    "title": "Hands-on Exercise - 1st Order Spatial Point Patterns Analysis",
    "section": "4.2 Working with different automatic bandwidth methods",
    "text": "4.2 Working with different automatic bandwidth methods\n\nbw.CvL(childcareSG_ppp.km);\n\n   sigma \n4.543278 \n\nbw.scott(childcareSG_ppp.km);\n\n sigma.x  sigma.y \n2.224898 1.450966 \n\nbw.ppl(childcareSG_ppp.km);\n\n    sigma \n0.3897114 \n\nbw.diggle(childcareSG_ppp.km)\n\n    sigma \n0.2984095 \n\n\n\nkde_childcareSG.ppl <- density(childcareSG_ppp.km, \n                               sigma=bw.ppl, \n                               edge=TRUE,\n                               kernel=\"gaussian\")\npar(mfrow=c(1,2))\nplot(kde_childcareSG.bw, main = \"bw.diggle\")\nplot(kde_childcareSG.ppl, main = \"bw.ppl\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#working-with-different-kernel-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#working-with-different-kernel-methods",
    "title": "Hands-on Exercise - 1st Order Spatial Point Patterns Analysis",
    "section": "4.3 Working with different kernel methods",
    "text": "4.3 Working with different kernel methods\n\npar(mfrow=c(2,2))\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\"), \n     main=\"Gaussian\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"epanechnikov\"), \n     main=\"Epanechnikov\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"quartic\"), \n     main=\"Quartic\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"disc\"), \n     main=\"Disc\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#computing-kde-by-using-fixed-bandwidth",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#computing-kde-by-using-fixed-bandwidth",
    "title": "Hands-on Exercise - 1st Order Spatial Point Patterns Analysis",
    "section": "5.1 Computing KDE by using fixed bandwidth",
    "text": "5.1 Computing KDE by using fixed bandwidth\n\nkde_childcareSG_600 <- density(childcareSG_ppp.km, \n                               sigma=0.6, \n                               edge=TRUE, \n                               kernel=\"gaussian\")\nplot(kde_childcareSG_600)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#computing-kde-by-using-adaptive-bandwidth",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#computing-kde-by-using-adaptive-bandwidth",
    "title": "Hands-on Exercise - 1st Order Spatial Point Patterns Analysis",
    "section": "5.2 Computing KDE by using adaptive bandwidth",
    "text": "5.2 Computing KDE by using adaptive bandwidth\n\nkde_childcareSG_adaptive <- adaptive.density(childcareSG_ppp.km, \n                                             method=\"kernel\")\nplot(kde_childcareSG_adaptive)\n\n\n\n\n\npar(mfrow=c(1,2))\nplot(kde_childcareSG.bw, main = \"Fixed bandwidth\")\nplot(kde_childcareSG_adaptive, main = \"Adaptive bandwidth\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#converting-kde-into-grid-object",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#converting-kde-into-grid-object",
    "title": "Hands-on Exercise - 1st Order Spatial Point Patterns Analysis",
    "section": "5.3 Converting KDE into grid object",
    "text": "5.3 Converting KDE into grid object\n\ngridded_kde_childcareSG_bw <- as.SpatialGridDataFrame.im(kde_childcareSG.bw)\nspplot(gridded_kde_childcareSG_bw)\n\n\n\n\n\n5.3.1 Converting gridded output into raster\n\nkde_childcareSG_bw_raster <- raster(gridded_kde_childcareSG_bw)\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : v \nvalues     : -8.476185e-15, 28.51831  (min, max)\n\n\n\n\n5.3.2 Assigning projection systems\n\nprojection(kde_childcareSG_bw_raster) <- CRS('+init=EPSG:3414')\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : +init=EPSG:3414 \nsource     : memory\nnames      : v \nvalues     : -8.476185e-15, 28.51831  (min, max)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualizing-the-output-in-tmap",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualizing-the-output-in-tmap",
    "title": "Hands-on Exercise - 1st Order Spatial Point Patterns Analysis",
    "section": "5.4 Visualizing the output in tmap",
    "text": "5.4 Visualizing the output in tmap\n\ntm_shape(kde_childcareSG_bw_raster) + \n  tm_raster(\"v\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), \n            frame = FALSE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#comparing-spatial-point-patterns-using-kde",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#comparing-spatial-point-patterns-using-kde",
    "title": "Hands-on Exercise - 1st Order Spatial Point Patterns Analysis",
    "section": "5.5 Comparing Spatial Point Patterns using KDE",
    "text": "5.5 Comparing Spatial Point Patterns using KDE\n\n5.5.1 Extracting study area\n\npg = mpsz[mpsz@data$PLN_AREA_N == \"PUNGGOL\",]\ntm = mpsz[mpsz@data$PLN_AREA_N == \"TAMPINES\",]\nck = mpsz[mpsz@data$PLN_AREA_N == \"CHOA CHU KANG\",]\njw = mpsz[mpsz@data$PLN_AREA_N == \"JURONG WEST\",]\n\n\npar(mfrow=c(2,2))\nplot(pg, main = \"Punggol\")\nplot(tm, main = \"Tampines\")\nplot(ck, main = \"Choa Chu Kang\")\nplot(jw, main = \"Jurong West\")\n\n\n\n\n\n\n5.5.2 Converting the spatial point data frame into generic sp format\n\npg_sp = as(pg, \"SpatialPolygons\")\ntm_sp = as(tm, \"SpatialPolygons\")\nck_sp = as(ck, \"SpatialPolygons\")\njw_sp = as(jw, \"SpatialPolygons\")\n\n\n\n5.5.3 Creating owin object\n\npg_owin = as(pg_sp, \"owin\")\ntm_owin = as(tm_sp, \"owin\")\nck_owin = as(ck_sp, \"owin\")\njw_owin = as(jw_sp, \"owin\")\n\n\n\n5.5.4 Combining childcare points and the study area\n\nchildcare_pg_ppp = childcare_ppp_jit[pg_owin]\nchildcare_tm_ppp = childcare_ppp_jit[tm_owin]\nchildcare_ck_ppp = childcare_ppp_jit[ck_owin]\nchildcare_jw_ppp = childcare_ppp_jit[jw_owin]\n\n\nchildcare_pg_ppp.km = rescale(childcare_pg_ppp, 1000, \"km\")\nchildcare_tm_ppp.km = rescale(childcare_tm_ppp, 1000, \"km\")\nchildcare_ck_ppp.km = rescale(childcare_ck_ppp, 1000, \"km\")\nchildcare_jw_ppp.km = rescale(childcare_jw_ppp, 1000, \"km\")\n\n\npar(mfrow=c(2,2))\nplot(childcare_pg_ppp.km, main=\"Punggol\")\nplot(childcare_tm_ppp.km, main=\"Tampines\")\nplot(childcare_ck_ppp.km, main=\"Choa Chu Kang\")\nplot(childcare_jw_ppp.km, main=\"Jurong West\")\n\n\n\n\n\n\n5.5.5 Computing KDE\n\npar(mfrow=c(2,2))\nplot(density(childcare_pg_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tempines\")\nplot(density(childcare_ck_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Choa Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"JUrong West\")\n\n\n\n\n\n\n5.5.6 Computing fixed bandwidth KDE\n\npar(mfrow=c(2,2))\nplot(density(childcare_ck_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Chou Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"JUrong West\")\nplot(density(childcare_pg_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tampines\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#testing-spatial-point-patterns-using-clark-and-evans-test",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#testing-spatial-point-patterns-using-clark-and-evans-test",
    "title": "Hands-on Exercise - 1st Order Spatial Point Patterns Analysis",
    "section": "6.1 Testing spatial point patterns using Clark and Evans Test",
    "text": "6.1 Testing spatial point patterns using Clark and Evans Test\n\nclarkevans.test(childcareSG_ppp,\n                correction=\"none\",\n                clipregion=\"sg_owin\",\n                alternative=c(\"clustered\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Monte Carlo test based on 99 simulations of CSR with fixed n\n\ndata:  childcareSG_ppp\nR = 0.54756, p-value = 0.01\nalternative hypothesis: clustered (R < 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#clark-and-evans-test-choa-chu-kang-planning-area",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#clark-and-evans-test-choa-chu-kang-planning-area",
    "title": "Hands-on Exercise - 1st Order Spatial Point Patterns Analysis",
    "section": "6.2 Clark and Evans Test: Choa Chu Kang planning area",
    "text": "6.2 Clark and Evans Test: Choa Chu Kang planning area\n\nclarkevans.test(childcare_ck_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Monte Carlo test based on 999 simulations of CSR with fixed n\n\ndata:  childcare_ck_ppp\nR = 0.92915, p-value = 0.074\nalternative hypothesis: two-sided"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "title": "In-Class Exercise - Geospatial Data Wrangling",
    "section": "",
    "text": "pacman::p_load(sf, tidyverse, readr, funModeling)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#import-shp-file---geospatial-data",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#import-shp-file---geospatial-data",
    "title": "In-Class Exercise - Geospatial Data Wrangling",
    "section": "2.1 Import shp file - Geospatial data",
    "text": "2.1 Import shp file - Geospatial data\n\nnga = st_read(dsn = \"data/geospatial\",\n                   layer = \"nga_admbnda_adm2\") %>% st_transform(crs = 26391)\n\nReading layer `nga_admbnda_adm2' from data source \n  `C:\\p-haas\\IS415\\In-class_Ex\\In-class_Ex02\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#understanding-the-data",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#understanding-the-data",
    "title": "In-Class Exercise - Geospatial Data Wrangling",
    "section": "2.2 Understanding the data",
    "text": "2.2 Understanding the data\n\n2.2.1 Nigeria Level-2 Administrative Boundary (example)\n\nst_geometry(nga)\n\nGeometry set for 774 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 28879.72 ymin: 30292.37 xmax: 1343798 ymax: 1094244\nProjected CRS: Minna / Nigeria West Belt\nFirst 5 geometries:\n\n\n\nglimpse(nga)\n\nRows: 774\nColumns: 17\n$ Shape_Leng <dbl> 0.2370744, 0.2624772, 3.0753158, 2.5379842, 0.6871498, 1.06…\n$ Shape_Area <dbl> 0.0015239210, 0.0035311037, 0.3268678399, 0.0683785064, 0.0…\n$ ADM2_EN    <chr> \"Aba North\", \"Aba South\", \"Abadam\", \"Abaji\", \"Abak\", \"Abaka…\n$ ADM2_PCODE <chr> \"NG001001\", \"NG001002\", \"NG008001\", \"NG015001\", \"NG003001\",…\n$ ADM2_REF   <chr> \"Aba North\", \"Aba South\", \"Abadam\", \"Abaji\", \"Abak\", \"Abaka…\n$ ADM2ALT1EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM2ALT2EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1_EN    <chr> \"Abia\", \"Abia\", \"Borno\", \"Federal Capital Territory\", \"Akwa…\n$ ADM1_PCODE <chr> \"NG001\", \"NG001\", \"NG008\", \"NG015\", \"NG003\", \"NG011\", \"NG02…\n$ ADM0_EN    <chr> \"Nigeria\", \"Nigeria\", \"Nigeria\", \"Nigeria\", \"Nigeria\", \"Nig…\n$ ADM0_PCODE <chr> \"NG\", \"NG\", \"NG\", \"NG\", \"NG\", \"NG\", \"NG\", \"NG\", \"NG\", \"NG\",…\n$ date       <date> 2016-11-29, 2016-11-29, 2016-11-29, 2016-11-29, 2016-11-29…\n$ validOn    <date> 2019-04-17, 2019-04-17, 2019-04-17, 2019-04-17, 2019-04-17…\n$ validTo    <date> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ SD_EN      <chr> \"Abia South\", \"Abia South\", \"Borno North\", \"Federal Capital…\n$ SD_PCODE   <chr> \"NG00103\", \"NG00103\", \"NG00802\", \"NG01501\", \"NG00302\", \"NG0…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((552560.3 12..., MULTIPOLYGON (…\n\n\n\n# head(nga)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#importing-aspatial-data-into-r-workbook",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#importing-aspatial-data-into-r-workbook",
    "title": "In-Class Exercise - Geospatial Data Wrangling",
    "section": "2.3 Importing Aspatial data into R Workbook",
    "text": "2.3 Importing Aspatial data into R Workbook\n\n2.3.1 Import csv file - Aspatial data\n\nwpdx_nigeria = filter(read_csv(\"data/aspatial/Water_Point_Data_Exchange_-_Plus__WPdx__.csv\"), `#clean_country_name` == \"Nigeria\")\n\n\n\n2.3.2 Convert Aspatial into Geospatial data\n\nwpdx_nigeria$Geometry = st_as_sfc(wpdx_nigeria$`New Georeferenced Column`)\nwpdx_sf = st_sf(wpdx_nigeria, crs = 4326) %>% st_transform(crs = 26391)\nwpdx_sf\n\nSimple feature collection with 95008 features and 70 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 32536.82 ymin: 33461.24 xmax: 1292096 ymax: 1091052\nProjected CRS: Minna / Nigeria West Belt\n# A tibble: 95,008 × 71\n   row_id `#source`      #lat_…¹ #lon_…² #repo…³ #stat…⁴ #wate…⁵ #wate…⁶ #wate…⁷\n *  <dbl> <chr>            <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 429068 GRID3             7.98    5.12 08/29/… Unknown <NA>    <NA>    Tapsta…\n 2 222071 Federal Minis…    6.96    3.60 08/16/… Yes     Boreho… Well    Mechan…\n 3 160612 WaterAid          6.49    7.93 12/04/… Yes     Boreho… Well    Hand P…\n 4 160669 WaterAid          6.73    7.65 12/04/… Yes     Boreho… Well    <NA>   \n 5 160642 WaterAid          6.78    7.66 12/04/… Yes     Boreho… Well    Hand P…\n 6 160628 WaterAid          6.96    7.78 12/04/… Yes     Boreho… Well    Hand P…\n 7 160632 WaterAid          7.02    7.84 12/04/… Yes     Boreho… Well    Hand P…\n 8 642747 Living Water …    7.33    8.98 10/03/… Yes     Boreho… Well    Mechan…\n 9 642456 Living Water …    7.17    9.11 10/03/… Yes     Boreho… Well    Hand P…\n10 641347 Living Water …    7.20    9.22 03/28/… Yes     Boreho… Well    Hand P…\n# … with 94,998 more rows, 62 more variables: `#water_tech_category` <chr>,\n#   `#facility_type` <chr>, `#clean_country_name` <chr>, `#clean_adm1` <chr>,\n#   `#clean_adm2` <chr>, `#clean_adm3` <chr>, `#clean_adm4` <chr>,\n#   `#install_year` <dbl>, `#installer` <chr>, `#rehab_year` <lgl>,\n#   `#rehabilitator` <lgl>, `#management_clean` <chr>, `#status_clean` <chr>,\n#   `#pay` <chr>, `#fecal_coliform_presence` <chr>,\n#   `#fecal_coliform_value` <dbl>, `#subjective_quality` <chr>, …"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#exclude-redundant-fields",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#exclude-redundant-fields",
    "title": "In-Class Exercise - Geospatial Data Wrangling",
    "section": "3.1 Exclude redundant fields",
    "text": "3.1 Exclude redundant fields\n\nnga <- nga %>%\n  select(c(3:4, 8:9))"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#checking-for-duplicates-with-ifelse-statement",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#checking-for-duplicates-with-ifelse-statement",
    "title": "In-Class Exercise - Geospatial Data Wrangling",
    "section": "3.2 Checking for duplicates with IFELSE() statement",
    "text": "3.2 Checking for duplicates with IFELSE() statement\n\nduplicated_LGA <- nga$ADM2_EN[duplicated(nga$ADM2_EN)==TRUE]\nnga$ADM2_EN = ifelse(nga$ADM2_EN %in% duplicated_LGA, paste(nga$ADM2_EN, nga$ADM1_EN, sep=\", \"), nga$ADM2_EN)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#extracting-water-point-data",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#extracting-water-point-data",
    "title": "In-Class Exercise - Geospatial Data Wrangling",
    "section": "4.1 Extracting Water Point Data",
    "text": "4.1 Extracting Water Point Data\n\nwp_functional <- wp_sf_nga %>%\n  filter(status_clean %in%\n           c(\"Functional\",\n             \"Functional but not in use\",\n             \"Functional but needs repair\"))\n\n\nwp_nonfunctional <- wp_sf_nga %>%\n  filter(status_clean %in%\n           c(\"Abandoned/Decommissioned\",\n             \"Abandoned\",\n             \"Non-Functional due to dry season\",\n             \"Non-Functional\",\n             \"Non functional due to dry season\"))\n\n\nwp_unknown <- wp_sf_nga %>%\n  filter(status_clean == \"unknown\")\n\n\nfreq(data = wp_functional,\n     input = 'status_clean')\n\n\n\n\n                 status_clean frequency percentage cumulative_perc\n1                  Functional     45883      87.99           87.99\n2 Functional but needs repair      4579       8.78           96.77\n3   Functional but not in use      1686       3.23          100.00\n\n\n\nfreq(data = wp_nonfunctional,\n     input = 'status_clean')\n\n\n\n\n                      status_clean frequency percentage cumulative_perc\n1                   Non-Functional     29385      91.25           91.25\n2 Non-Functional due to dry season      2403       7.46           98.71\n3         Abandoned/Decommissioned       234       0.73           99.44\n4                        Abandoned       175       0.54           99.98\n5 Non functional due to dry season         7       0.02          100.00\n\n\n\nfreq(data = wp_unknown,\n     input = 'status_clean')\n\n\n\n\n  status_clean frequency percentage cumulative_perc\n1      unknown     10656        100             100"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#performing-point-in-polygon-count",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#performing-point-in-polygon-count",
    "title": "In-Class Exercise - Geospatial Data Wrangling",
    "section": "4.2 Performing Point-in-Polygon Count",
    "text": "4.2 Performing Point-in-Polygon Count\n\nNGA_wp <- nga %>% \n  mutate(`total_wp` = lengths(\n    st_intersects(nga, wp_sf_nga))) %>%\n  mutate(`wp_functional` = lengths(\n    st_intersects(nga, wp_functional))) %>%\n  mutate(`wp_nonfunctional` = lengths(\n    st_intersects(nga, wp_nonfunctional))) %>%\n  mutate(`wp_unknown` = lengths(\n    st_intersects(nga, wp_unknown)))"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#visualing-attributes-by-using-statistical-graphs",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#visualing-attributes-by-using-statistical-graphs",
    "title": "In-Class Exercise - Geospatial Data Wrangling",
    "section": "4.3 Visualing attributes by using statistical graphs",
    "text": "4.3 Visualing attributes by using statistical graphs\n\nggplot(data = NGA_wp,\n       aes(x = total_wp)) + \n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"light blue\") +\n  geom_vline(aes(xintercept=mean(\n    total_wp, na.rm=T)),\n             color=\"red\", \n             linetype=\"dashed\", \n             size=0.8) +\n  ggtitle(\"Distribution of total water points by LGA\") +\n  xlab(\"No. of water points\") +\n  ylab(\"No. of\\nLGAs\") +\n  theme(axis.title.y=element_text(angle = 0))"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#saving-the-analytical-data-in-rds-format",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#saving-the-analytical-data-in-rds-format",
    "title": "In-Class Exercise - Geospatial Data Wrangling",
    "section": "4.4 Saving the analytical data in rds format",
    "text": "4.4 Saving the analytical data in rds format\n\nwrite_rds(NGA_wp, \"data/rds/NGA_wp.rds\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html",
    "title": "In-class Exercise 3",
    "section": "",
    "text": "pacman::p_load(tidyverse, tmap, sf)\n\n\n\n\n\nNGA_wp <- read_rds(\"data/rds/NGA_wp.rds\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#visualising-distribution-of-non-functional-water-point",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#visualising-distribution-of-non-functional-water-point",
    "title": "In-class Exercise 3",
    "section": "2.1 Visualising distribution of non-functional water point",
    "text": "2.1 Visualising distribution of non-functional water point\n\ntm_shape(NGA_wp)+\n  tm_fill(\"wp_nonfunctional\",\n          n = 10,\n          style=\"equal\",\n          palette=\"Blues\")+\n  tm_borders(lwd=0.1)+\n  tm_layout(main.title = \"Distribution of nonfunctional water point by LGAs\",\n            legend.outside = FALSE)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#class-work-and-code",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#class-work-and-code",
    "title": "In-class Exercise 3",
    "section": "2.2 Class work and code",
    "text": "2.2 Class work and code\n\np1 <- tm_shape(NGA_wp) +\n  tm_fill(\"wp_functional\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\") +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Distribution of functional water point by LGAs\",\n            legend.outside = FALSE)\n\n\np2 <- tm_shape(NGA_wp) +\n  tm_fill(\"total_wp\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\") +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Distribution of total water point by LGAs\",\n            legend.outside = FALSE)\n\n\ntmap_arrange(p2, p1, nrow = 1)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#deriving-proportion-of-functional-and-non-functional-water-points",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#deriving-proportion-of-functional-and-non-functional-water-points",
    "title": "In-class Exercise 3",
    "section": "3.1 Deriving Proportion of Functional and Non-functional Water Points",
    "text": "3.1 Deriving Proportion of Functional and Non-functional Water Points\n\nNGA_wp = NGA_wp %>%\n  mutate(pct_functional = wp_functional / total_wp) %>%\n  mutate(pct_nonfunctional = wp_nonfunctional / total_wp)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#plotting-map-of-rates",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#plotting-map-of-rates",
    "title": "In-class Exercise 3",
    "section": "3.2 Plotting Map of Rates",
    "text": "3.2 Plotting Map of Rates\n\ntm_shape(NGA_wp) +\n  tm_fill(\"pct_functional\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\",\n          legend.hist = TRUE) +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Rate map of functional  water points by LGAs\",\n            legend.outside = TRUE)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#percentile-map",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#percentile-map",
    "title": "In-class Exercise 3",
    "section": "4.1 Percentile Map",
    "text": "4.1 Percentile Map\n\n4.1.1 Data Preparation\n\nNGA_wp = NGA_wp %>%\n  drop_na()\n\n\npercent <- c(0,.01,.1,.5,.9,.99,1)\nvar <- NGA_wp[\"pct_functional\"] %>%\n  st_set_geometry(NULL)\nquantile(var[,1], percent)\n\n       0%        1%       10%       50%       90%       99%      100% \n0.0000000 0.0000000 0.2169811 0.4791667 0.8611111 1.0000000 1.0000000 \n\n\n\n\n4.1.2 Creating the get.var() function\n\nget.var <- function(vname,df) {\n  v <- df[vname] %>% \n    st_set_geometry(NULL)\n  v <- unname(v[,1])\n  return(v)\n}\n\n\n\n4.1.3 A percentile mapping function\n\npercentmap <- function(vnam, df, legtitle=NA, mtitle=\"Percentile Map\"){\n  percent <- c(0,.01,.1,.5,.9,.99,1)\n  var <- get.var(vnam, df)\n  bperc <- quantile(var, percent)\n  tm_shape(df) +\n  tm_polygons() +\n  tm_shape(df) +\n     tm_fill(vnam,\n             title=legtitle,\n             breaks=bperc,\n             palette=\"Blues\",\n          labels=c(\"< 1%\", \"1% - 10%\", \"10% - 50%\", \"50% - 90%\", \"90% - 99%\", \"> 99%\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"right\",\"bottom\"))\n}\n\n\n\n4.1.4 Test drive the percentile mapping function\n\npercentmap(\"total_wp\", NGA_wp)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#box-map",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#box-map",
    "title": "In-class Exercise 3",
    "section": "4.2 Box map",
    "text": "4.2 Box map\n\nggplot(data = NGA_wp,\n       aes(x = \"\",\n           y = wp_nonfunctional)) +\n  geom_boxplot()\n\n\n\n\n\n4.2.1 Creating the boxbreaks function\n\nboxbreaks <- function(v,mult=1.5) {\n  qv <- unname(quantile(v))\n  iqr <- qv[4] - qv[2]\n  upfence <- qv[4] + mult * iqr\n  lofence <- qv[2] - mult * iqr\n  # initialize break points vector\n  bb <- vector(mode=\"numeric\",length=7)\n  # logic for lower and upper fences\n  if (lofence < qv[1]) {  # no lower outliers\n    bb[1] <- lofence\n    bb[2] <- floor(qv[1])\n  } else {\n    bb[2] <- lofence\n    bb[1] <- qv[1]\n  }\n  if (upfence > qv[5]) { # no upper outliers\n    bb[7] <- upfence\n    bb[6] <- ceiling(qv[5])\n  } else {\n    bb[6] <- upfence\n    bb[7] <- qv[5]\n  }\n  bb[3:5] <- qv[2:4]\n  return(bb)\n}\n\n\n\n4.2.2 Test drive the newly created function\n\nvar <- get.var(\"wp_nonfunctional\", NGA_wp) \nboxbreaks(var)\n\n[1] -56.5   0.0  14.0  34.0  61.0 131.5 278.0\n\n\n\n\n4.2.3 Boxmap function\n\nboxmap <- function(vnam, df, \n                   legtitle=NA,\n                   mtitle=\"Box Map\",\n                   mult=1.5){\n  var <- get.var(vnam,df)\n  bb <- boxbreaks(var)\n  tm_shape(df) +\n    tm_polygons() +\n  tm_shape(df) +\n     tm_fill(vnam,title=legtitle,\n             breaks=bb,\n             palette=\"Blues\",\n          labels = c(\"lower outlier\", \n                     \"< 25%\", \n                     \"25% - 50%\", \n                     \"50% - 75%\",\n                     \"> 75%\", \n                     \"upper outlier\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"left\",\n                               \"top\"))\n}\n\n\ntmap_mode(\"plot\")\nboxmap(\"wp_nonfunctional\", NGA_wp)\n\n\n\n\n\n\n4.2.4 Recode NA values to zero\n\nNGA_wp <- NGA_wp %>%\n  mutate(wp_functional = na_if(\n    total_wp, total_wp < 0))"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "title": "In-class Exercise - Spatial Point Patterns Analysis",
    "section": "",
    "text": "pacman::p_load(maptools, sf, raster, spatstat, tmap)\n\nThings to learn from this code chunk.\n\n\n\n\nchildcare_sf = st_read(\"data/child-care-services-geojson.geojson\") %>%\n  st_transform(crs=3414)\n\nReading layer `child-care-services-geojson' from data source \n  `C:\\p-haas\\IS415\\In-class_Ex\\In-class_Ex04\\data\\child-care-services-geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1545 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nsg_sf = st_read(dsn=\"data\", layer=\"CostalOutline\")\n\nReading layer `CostalOutline' from data source \n  `C:\\p-haas\\IS415\\In-class_Ex\\In-class_Ex04\\data' using driver `ESRI Shapefile'\nSimple feature collection with 60 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\nProjected CRS: SVY21\n\n\n\nmpsz_sf = st_read(dsn=\"data\", layer=\"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\p-haas\\IS415\\In-class_Ex\\In-class_Ex04\\data' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#converting-sf-data-frames-into-sp-spatial-class",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#converting-sf-data-frames-into-sp-spatial-class",
    "title": "In-class Exercise - Spatial Point Patterns Analysis",
    "section": "3.1 Converting sf data frames into sp Spatial* Class",
    "text": "3.1 Converting sf data frames into sp Spatial* Class\n\nchildcare = as_Spatial(childcare_sf)\nmpsz      = as_Spatial(mpsz_sf)\nsg        = as_Spatial(sg_sf)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#converting-spatial-class-into-generic-sp-format",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#converting-spatial-class-into-generic-sp-format",
    "title": "In-class Exercise - Spatial Point Patterns Analysis",
    "section": "3.2 Converting Spatial* Class into generic sp format",
    "text": "3.2 Converting Spatial* Class into generic sp format\n\nchildcare_sp = as(childcare, \"SpatialPoints\")\nsg_sp        = as(sg, \"SpatialPolygons\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#converting-generic-sp-format-into-spatstat-ppps-format",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#converting-generic-sp-format-into-spatstat-ppps-format",
    "title": "In-class Exercise - Spatial Point Patterns Analysis",
    "section": "3.3 Converting generic sp format into spatstat ppp’s format",
    "text": "3.3 Converting generic sp format into spatstat ppp’s format\n\nchildcare_ppp <- as(childcare_sp, \"ppp\")\nchildcare_ppp\n\nPlanar point pattern: 1545 points\nwindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#section-1",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#section-1",
    "title": "In-class Exercise - Spatial Point Patterns Analysis",
    "section": "4.1",
    "text": "4.1\n\ntmap_mode('view')\ntm_shape(childcare_sf)+\n  tm_dots(alpha = 0.5,\n          size = 0.01)+\n  tm_view(set.zoom.limits = c(11, 13))\n\n\n\n\n\n\n\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/data/stores.html",
    "href": "In-class_Ex/In-class_Ex05/data/stores.html",
    "title": "IS415",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>     \n\n\n        0 0     false"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/data/study_area.html",
    "href": "In-class_Ex/In-class_Ex05/data/study_area.html",
    "title": "IS415",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html",
    "title": "In-class Exercise - Spatial Point Patterns Analysis",
    "section": "",
    "text": "pacman::p_load(tidyverse, tmap, sf, sfdep)\n\n\nstudyArea = st_read(dsn = \"data\",\n                    layer = \"study_area\") %>%\n  st_transform(crs = 3829)\n\nReading layer `study_area' from data source \n  `C:\\p-haas\\IS415\\In-class_Ex\\In-class_Ex05\\data' using driver `ESRI Shapefile'\nSimple feature collection with 7 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 121.4836 ymin: 25.00776 xmax: 121.592 ymax: 25.09288\nGeodetic CRS:  TWD97\n\n\n\nstores = st_read(dsn = \"data\",\n                    layer = \"stores\") %>%\n  st_transform(crs = 3829)\n\nReading layer `stores' from data source \n  `C:\\p-haas\\IS415\\In-class_Ex\\In-class_Ex05\\data' using driver `ESRI Shapefile'\nSimple feature collection with 1409 features and 4 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 121.4902 ymin: 25.01257 xmax: 121.5874 ymax: 25.08557\nGeodetic CRS:  TWD97\n\n\n\ntmap_mode(\"view\")\ntm_shape(studyArea)+\n  tm_polygons()+\ntm_shape(stores)+\n  tm_dots(col = \"Name\",\n          size = 0.01,\n          border.col = \"black\",\n          border.lwd = 0.5)+\n  tm_view(set.zoom.limits = c(12, 16))\n\n\n\n\n\n\n\nLocal Colocation Quotients (LCLQ)\n\nnb = include_self(st_knn(st_geometry(stores), 6))\n\nwt = st_kernel_weights(nb, stores, \"gaussian\", adaptive = TRUE)\n\n\nFamilyMart = stores %>%\n  filter(Name == \"Family Mart\")\nA = FamilyMart$Name\n\n\nSevenEleven = stores %>%\n  filter(Name == \"7-Eleven\")\nB = SevenEleven$Name\n\n\nLCLQ = local_colocation(A, B, nb, wt, 49)\n\n\nLCLQ_stores = cbind(stores, LCLQ)\n\n\ntmap_mode(\"view\")\ntm_shape(studyArea)+\n  tm_polygons()+\ntm_shape(LCLQ_stores)+\n  tm_dots(col = \"X7.Eleven\",\n          size = 0.01,\n          border.col = \"black\",\n          border.lwd = 0.5)+\n  tm_view(set.zoom.limits = c(12, 16))"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex06/In-class_Ex06.html",
    "href": "In-class_Ex/In-class_Ex06/In-class_Ex06.html",
    "title": "In-Class Exercise -",
    "section": "",
    "text": "pacman::p_load(sf, sfdep, tmap, tidyverse)\n\n\n\n\n\n\n\nhunan2012 = read_csv(\"data/aspatial/Hunan_2012.csv\")\nhead(hunan2012)\n\n# A tibble: 6 × 29\n  County   City  avg_w…¹ depos…²   FAI Gov_Rev Gov_Exp    GDP GDPPC    GIO  Loan\n  <chr>    <chr>   <dbl>   <dbl> <dbl>   <dbl>   <dbl>  <dbl> <dbl>  <dbl> <dbl>\n1 Anhua    Yiya…   30544  10967  6832.    457.   2703  13225  14567  9277. 3955.\n2 Anren    Chen…   28058   4599. 6386.    221.   1455.  4941. 12761  4189. 2555.\n3 Anxiang  Chan…   31935   5517. 3541     244.   1780. 12482  23667  5109. 2807.\n4 Baojing  Huna…   30843   2250  1005.    193.   1379.  4088. 14563  3624. 1254.\n5 Chaling  Zhuz…   31251   8241. 6508.    620.   1947  11585  20078  9158. 4287.\n6 Changni… Heng…   28518  10860  7920     770.   2632. 19886  24418 37392  4243.\n# … with 18 more variables: NIPCR <dbl>, Bed <dbl>, Emp <dbl>, EmpR <dbl>,\n#   EmpRT <dbl>, Pri_Stu <dbl>, Sec_Stu <dbl>, Household <dbl>,\n#   Household_R <dbl>, NOIP <dbl>, Pop_R <dbl>, RSCG <dbl>, Pop_T <dbl>,\n#   Agri <dbl>, Service <dbl>, Disp_Inc <dbl>, RORP <dbl>, ROREmp <dbl>, and\n#   abbreviated variable names ¹​avg_wage, ²​deposite\n\n\n\n\n\n\nhunanGeo = st_read(dsn = \"data/geospatial\",\n                   layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\p-haas\\IS415\\In-class_Ex\\In-class_Ex06\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\nglimpse(hunanGeo)\n\nRows: 88\nColumns: 8\n$ NAME_2     <chr> \"Changde\", \"Changde\", \"Changde\", \"Changde\", \"Changde\", \"Cha…\n$ ID_3       <int> 21098, 21100, 21101, 21102, 21103, 21104, 21109, 21110, 211…\n$ NAME_3     <chr> \"Anxiang\", \"Hanshou\", \"Jinshi\", \"Li\", \"Linli\", \"Shimen\", \"L…\n$ ENGTYPE_3  <chr> \"County\", \"County\", \"County City\", \"County\", \"County\", \"Cou…\n$ Shape_Leng <dbl> 1.869074, 2.360691, 1.425620, 3.474325, 2.289506, 4.171918,…\n$ Shape_Area <dbl> 0.10056190, 0.19978745, 0.05302413, 0.18908121, 0.11450357,…\n$ County     <chr> \"Anxiang\", \"Hanshou\", \"Jinshi\", \"Li\", \"Linli\", \"Shimen\", \"L…\n$ geometry   <POLYGON [°]> POLYGON ((112.0625 29.75523..., POLYGON ((112.2288 …\n\n\n\n\n\n\n\nhunan_gdppc = left_join(hunanGeo, hunan2012) %>%\n  select(1:4, 7, 15)\n\nNote that we keep columns NAME_3 and County to double check that the left join was done correctly and that spelling is the same across the two columns.\n\n\n\n\ntm_shape(hunan_gdppc)+\n  tm_fill(\"GDPPC\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          title = \"GDP / cap\")+\n  tm_layout(main.title = \"Distribution of GDP per capita by \",\n          main.title.position = \"center\",\n          main.title.size = 1.2,\n          legend.height = 0.45,\n          legend.width = 0.35,\n          frame = TRUE)+\n  tm_borders(alpha = 0.5)+\n  tm_compass(type = \"8star\", size = 2)+\n  tm_scale_bar()+\n  tm_grid(alpha = 0.2)\n\n\n\n\n\n\n\nUsing the Queen method\n\ncn_queen = hunan_gdppc %>%\n  mutate(nb = st_contiguity(geometry),\n         .before = 1)\n\nUsing the Rooks method\n\ncn_rooks = hunan_gdppc %>%\n  mutate(nb = st_contiguity(geometry, queen = FALSE),\n         .before = 1)\n\n\n\n\nUsing the Queen method\n\nwm_q = hunan_gdppc %>%\n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb),\n         .before = 1)\n\nUsing the Rooks method\n\nwm_r = hunan_gdppc %>%\n  mutate(nb = st_contiguity(geometry),\n         queen = FALSE,\n         wt = st_weights(nb),\n         .before = 1)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html",
    "title": "In-class Exercise - Application of Spatial Point Patterns Analysis",
    "section": "",
    "text": "pacman::p_load(sf, sfdep, tmap, tidyverse)\n\n\n\n\n\n\n\nhunan2012 = read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\n\n\n\nhunanGeo = st_read(dsn = \"data/geospatial\",\n                layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\p-haas\\IS415\\In-class_Ex\\In-class_Ex07\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n\n\nhunan_gdppc = left_join(hunanGeo, hunan2012) %>%\n  select(1:4, 7, 15)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "IS415",
    "section": "",
    "text": "Welcome to IS415 Geospatial Analytics and Applications.\nThis is the course website of IS415 I study this semester. You will find all my course work on this website."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex1.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex1.html",
    "title": "Take-home Exercise - Application of Spatial Point Patterns Analysis",
    "section": "",
    "text": "Here, you will find a list with the data used, its type, format, and source it was extracted from.\n\n\n\nType\nData\nFormat\nSource\n\n\n\n\nGeospatial\nState GIS boundary data of Nigeria - Administration Level 1, 2 & 3\n.shp\nOCHA data, extracted from the Humanitarian Data Exchange portal (data)\n\n\nGeospatial\nState GIS boundary data of Nigeria - Administration Level 2\n.shp\nData collected from geoboundaries.org\n\n\nAspatial\nWater Point Data Exchange Plus\n.csv\nData extracted from WPdx Global Data Repositories\n\n\n\nNote that the geoboundaries and OCHA data serve the same purpose. I decided to included both data set before choosing the most convenient one, based on a practical analysis of the variables included in the data sets.\n\n\n\nFor the purpose of our analysis, we will be using the following libraries:\n\nsf\ntmap\nspatstat\nraster\nmaptools\nfunModeling\ntidyverse and readr, dplyr, ggplot2 & tidyr dependencies\npacman\n\nTo installl and load the packages, we will be using the function p_load() of the pacman package. This will ensure that all packages are installed and loaded properly.\n\n\nShow code\npacman::p_load(sf, tmap, funModeling, maptools, spatstat, tidyverse, raster, sfdep)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex1.html#importing-aspatial-data-csv-format",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex1.html#importing-aspatial-data-csv-format",
    "title": "Take-home Exercise - Application of Spatial Point Patterns Analysis",
    "section": "2.1 Importing Aspatial Data, csv format",
    "text": "2.1 Importing Aspatial Data, csv format\n\nImport dataGlimpseRegion filter\n\n\nWe use the read_csv() function from the readr package. This allows us to import the water point file into our R notebook. We will store the data set under the variable wp_nga.\n\n\nShow code\nwp_nga = read_csv(\"data/aspatial/Water_Point_Data_Exchange_-_Plus__WPdx__.csv\", show_col_types = FALSE)\n\n\n\n\nBefore diving into Data Wrangling, the first step is to get an understanding of the data and its attributes. By using the function glimpse() of the dplyr package, we will be able to view the attributes of this data set and data type of each field.\n\nglimpse(wp_nga)\n\nRows: 406,566\nColumns: 70\n$ row_id                        <dbl> 651816, 584864, 509399, 21983, 660321, 6…\n$ `#source`                     <chr> \"Water For People\", \"Global Environment …\n$ `#lat_deg`                    <dbl> -15.726464200, 6.723120000, 8.001933333,…\n$ `#lon_deg`                    <dbl> 35.05067, -1.58151, -11.28760, -10.12595…\n$ `#report_date`                <chr> \"06/11/2018 12:00:00 AM\", \"10/25/2017 12…\n$ `#status_id`                  <chr> \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\"…\n$ `#water_source_clean`         <chr> NA, NA, NA, NA, \"Piped Water\", \"Piped Wa…\n$ `#water_source_category`      <chr> NA, NA, NA, NA, \"Piped Water\", \"Piped Wa…\n$ `#water_tech_clean`           <chr> \"Kiosk\", \"Tapstand\", \"Tapstand\", \"Tapsta…\n$ `#water_tech_category`        <chr> \"Tapstand\", \"Tapstand\", \"Tapstand\", \"Tap…\n$ `#facility_type`              <chr> \"Improved\", \"Improved\", \"Improved\", \"Imp…\n$ `#clean_country_name`         <chr> \"Malawi\", \"Ghana\", \"Sierra Leone\", \"Libe…\n$ `#clean_adm1`                 <chr> \"Blantyre\", \"Ashanti\", \"Eastern\", \"Lofa\"…\n$ `#clean_adm2`                 <chr> \"Blantyre City\", \"Asokore Mampong Munici…\n$ `#clean_adm3`                 <chr> \"n.a. (2465)\", NA, \"Kando Leppeama\", \"Lu…\n$ `#clean_adm4`                 <chr> NA, NA, NA, NA, \"Kamwenge Town Council\",…\n$ `#install_year`               <dbl> NA, 2017, NA, NA, NA, NA, NA, NA, NA, NA…\n$ `#installer`                  <chr> NA, NA, \"Water Aid\", NA, NA, NA, NA, NA,…\n$ `#rehab_year`                 <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#rehabilitator`              <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#management_clean`           <chr> NA, NA, NA, \"School Management\", NA, NA,…\n$ `#status_clean`               <chr> NA, NA, \"Functional\", NA, NA, NA, NA, NA…\n$ `#pay`                        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#fecal_coliform_presence`    <chr> NA, NA, NA, NA, \"Present\", \"Present\", \"P…\n$ `#fecal_coliform_value`       <dbl> NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `#subjective_quality`         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#activity_id`                <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#scheme_id`                  <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#wpdx_id`                    <chr> \"5GPQ73F2+C77\", \"6CRWPCF9+69X\", \"6CWC2P2…\n$ `#notes`                      <chr> NA, NA, \"Poor…Jenneh…Kandu Leppiema……\", …\n$ `#orig_lnk`                   <chr> NA, NA, NA, \"https://wash-liberia.org/ra…\n$ `#photo_lnk`                  <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#country_id`                 <chr> \"MW\", \"GH\", \"SL\", \"LR\", \"UG\", \"UG\", \"UG\"…\n$ `#data_lnk`                   <chr> \"https://catalog.waterpointdata.org/data…\n$ `#distance_to_primary_road`   <dbl> 7034.8250, 3677.9101, 17540.3622, 21602.…\n$ `#distance_to_secondary_road` <dbl> 3431.81039, 3944.70081, 4052.93329, 3703…\n$ `#distance_to_tertiary_road`  <dbl> 421.90674, 690.13048, 104.43156, 14456.7…\n$ `#distance_to_city`           <dbl> 8321.854, 5362.011, 17003.136, 52727.389…\n$ `#distance_to_town`           <dbl> 22044.5149, 7550.3392, 15474.4428, 31606…\n$ water_point_history           <chr> \"{\\\"2018-06-11\\\": {\\\"source\\\": \\\"Water F…\n$ rehab_priority                <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ water_point_population        <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ local_population_1km          <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ crucialness_score             <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ pressure_score                <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ usage_capacity                <dbl> 250, 250, 250, 250, 250, 250, 250, 250, …\n$ is_urban                      <lgl> TRUE, TRUE, FALSE, FALSE, FALSE, FALSE, …\n$ days_since_report             <dbl> 1562, 1791, 4281, 2482, 1286, 1281, 1660…\n$ staleness_score               <dbl> 61.11805, 56.86178, 25.93887, 45.73258, …\n$ latest_record                 <lgl> TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE…\n$ location_id                   <dbl> 355848, 349148, 98255, 285679, 362508, 3…\n$ cluster_size                  <dbl> 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1…\n$ `#clean_country_id`           <chr> \"MWI\", \"GHA\", \"SLE\", \"LBR\", \"UGA\", \"UGA\"…\n$ `#country_name`               <chr> \"Malawi\", \"Ghana\", \"Sierra Leone\", \"Libe…\n$ `#water_source`               <chr> NA, NA, \"Gravity stand-post\", \"Public st…\n$ `#water_tech`                 <chr> \"Communal water kiosk\", \"Standpost\", NA,…\n$ `#status`                     <chr> \"1\", NA, \"Functional\", NA, \"1\", \"0\", \"1\"…\n$ `#adm2`                       <chr> \"Kameza\", NA, \"Kenema\", NA, \"Kibale\", \"K…\n$ `#adm3`                       <chr> NA, NA, NA, NA, \"Kamwenge T/Council\", \"B…\n$ `#management`                 <chr> NA, NA, NA, \"Institutional Management - …\n$ `#adm1`                       <chr> \"Blantyre\", NA, \"Eastern\", \"Lofa\", \"Kamw…\n$ `New Georeferenced Column`    <chr> \"POINT (35.0506729 -15.7264642)\", \"POINT…\n$ lat_deg_original              <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ lat_lon_deg                   <chr> \"(-15.7264642°, 35.0506729°)\", \"(6.72312…\n$ lon_deg_original              <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ public_data_source            <chr> \"https://catalog.waterpointdata.org/data…\n$ converted                     <chr> NA, NA, \"#install_year, #notes\", \"#statu…\n$ count                         <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ created_timestamp             <chr> \"02/18/2022 05:36:33 AM\", \"07/29/2020 07…\n$ updated_timestamp             <chr> \"02/18/2022 05:36:33 AM\", \"07/29/2020 07…\n\n\nThe output reveals that we have a tible data frame – wp_nga – composed of 406,566 data points and 70 columns. It is now time to take a few seconds to browse through the data to get a proper look at the different attributes in the data set.\nSince our goal is to observe data only from the Osun state in Nigeria, we should take a look at the attributes that will allow us to filter the data set. It seems like the columns: clean_country_name & clean_adm1 contain the information about the country and state of the water points.\n\n\nUsing the filter() function, we will be to select on data points from the Osun state in Nigeria.\n\nwp_nga = wp_nga %>% \n  filter(`#clean_country_name` == \"Nigeria\" & `#clean_adm1` == \"Osun\")\n\nTo check if there are no mistake, we can use the function unique() to help us view all the unique strings in the columns clean_country_name & clean_adm1\n\nunique(wp_nga$`#clean_adm1`); unique(wp_nga$`#clean_country_name`)\n\n[1] \"Osun\"\n\n\n[1] \"Nigeria\"\n\n\nWe obtained the desired output, we are only left with data points located in Osun state, Nigeria\n\n\n\n\n2.1.1 Converting water point data into sf point features\nUsing the st_as_sfc() function of the sf package, we convert the wkt field – `New Georeferenced Column` –into a sfc field.\n\nwp_nga$Geometry = st_as_sfc(wp_nga$`New Georeferenced Column`)\nwp_nga\n\n# A tibble: 5,557 × 71\n   row_id `#source`      #lat_…¹ #lon_…² #repo…³ #stat…⁴ #wate…⁵ #wate…⁶ #wate…⁷\n    <dbl> <chr>            <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 429123 GRID3             8.02    5.06 08/29/… Unknown <NA>    <NA>    Tapsta…\n 2  70566 Federal Minis…    7.32    4.79 05/11/… No      Protec… Well    Mechan…\n 3  70578 Federal Minis…    7.76    4.56 05/11/… No      Boreho… Well    Mechan…\n 4  66401 Federal Minis…    8.03    4.64 04/30/… No      Boreho… Well    Mechan…\n 5 422190 GRID3             7.87    4.88 08/29/… Unknown <NA>    <NA>    Tapsta…\n 6 422064 GRID3             7.7     4.89 08/29/… Unknown <NA>    <NA>    Tapsta…\n 7  65607 Federal Minis…    7.89    4.71 05/12/… No      Boreho… Well    Mechan…\n 8  68989 Federal Minis…    7.51    4.27 05/07/… No      Boreho… Well    <NA>   \n 9  67708 Federal Minis…    7.48    4.35 04/29/… Yes     Boreho… Well    Mechan…\n10  66419 Federal Minis…    7.63    4.50 05/08/… Yes     Boreho… Well    Hand P…\n# … with 5,547 more rows, 62 more variables: `#water_tech_category` <chr>,\n#   `#facility_type` <chr>, `#clean_country_name` <chr>, `#clean_adm1` <chr>,\n#   `#clean_adm2` <chr>, `#clean_adm3` <chr>, `#clean_adm4` <chr>,\n#   `#install_year` <dbl>, `#installer` <chr>, `#rehab_year` <lgl>,\n#   `#rehabilitator` <lgl>, `#management_clean` <chr>, `#status_clean` <chr>,\n#   `#pay` <chr>, `#fecal_coliform_presence` <chr>,\n#   `#fecal_coliform_value` <dbl>, `#subjective_quality` <chr>, …\n\n\nNow, we can convert the tibble data frame into a sf object using the st_sf() function. We shall also specify the georeferencing system (crs code). Here, it seems like the data is referenced in WGS84.\n\nwp_sf <- wp_nga %>%\n  st_sf(crs=4326)\nwp_sf\n\nSimple feature collection with 5557 features and 70 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 4.032004 ymin: 7.060309 xmax: 5.06 ymax: 8.061898\nGeodetic CRS:  WGS 84\n# A tibble: 5,557 × 71\n   row_id `#source`      #lat_…¹ #lon_…² #repo…³ #stat…⁴ #wate…⁵ #wate…⁶ #wate…⁷\n *  <dbl> <chr>            <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 429123 GRID3             8.02    5.06 08/29/… Unknown <NA>    <NA>    Tapsta…\n 2  70566 Federal Minis…    7.32    4.79 05/11/… No      Protec… Well    Mechan…\n 3  70578 Federal Minis…    7.76    4.56 05/11/… No      Boreho… Well    Mechan…\n 4  66401 Federal Minis…    8.03    4.64 04/30/… No      Boreho… Well    Mechan…\n 5 422190 GRID3             7.87    4.88 08/29/… Unknown <NA>    <NA>    Tapsta…\n 6 422064 GRID3             7.7     4.89 08/29/… Unknown <NA>    <NA>    Tapsta…\n 7  65607 Federal Minis…    7.89    4.71 05/12/… No      Boreho… Well    Mechan…\n 8  68989 Federal Minis…    7.51    4.27 05/07/… No      Boreho… Well    <NA>   \n 9  67708 Federal Minis…    7.48    4.35 04/29/… Yes     Boreho… Well    Mechan…\n10  66419 Federal Minis…    7.63    4.50 05/08/… Yes     Boreho… Well    Hand P…\n# … with 5,547 more rows, 62 more variables: `#water_tech_category` <chr>,\n#   `#facility_type` <chr>, `#clean_country_name` <chr>, `#clean_adm1` <chr>,\n#   `#clean_adm2` <chr>, `#clean_adm3` <chr>, `#clean_adm4` <chr>,\n#   `#install_year` <dbl>, `#installer` <chr>, `#rehab_year` <lgl>,\n#   `#rehabilitator` <lgl>, `#management_clean` <chr>, `#status_clean` <chr>,\n#   `#pay` <chr>, `#fecal_coliform_presence` <chr>,\n#   `#fecal_coliform_value` <dbl>, `#subjective_quality` <chr>, …\n\n\n\n\n2.1.2 Transforming into Nigeria projected coordinate system\nUsing the function st_transform(), we transform the sf coordinates of our data points into the Nigerian projected coordinate system.\nNote that there are three Projected Coordinate Systems of Nigeria, they are: EPSG: 26391, 26392, and 26303. For the purpose of our analysis, we will choose EPSG: 26391.\n\nwp_sf <- wp_sf %>%\n  st_transform(crs = 26391)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex1.html#importing-geospatial-data-shp-format",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex1.html#importing-geospatial-data-shp-format",
    "title": "Take-home Exercise - Application of Spatial Point Patterns Analysis",
    "section": "2.2 Importing Geospatial Data, shp format",
    "text": "2.2 Importing Geospatial Data, shp format\n\n2.2.1 The NGA data set\n\nImport dataCheck CRSst_transform()\n\n\nWe use the function st_read() from sf package to import our geospatial data. Here, we import the NGA data set, which is stored in our data folder as a shp file. Since our analysis is focused on the Osun State (Nigeria), we will use the filter() function to select the data corresponding to the Administration Level 1 of Osun State.\n\nnga = st_read(dsn = \"data/geospatial\",\n                   layer = \"nga_admbnda_adm2\") %>%\n  filter(ADM1_EN == \"Osun\")\n\nReading layer `nga_admbnda_adm2' from data source \n  `C:\\p-haas\\IS415\\Take-home_Ex\\Take-home_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n\n\n\n\nBefore proceeding to the next steps, I would like to retrieve the CRS code from the sf object to perform a quick check that the CRS and code match. To do so, we use the st_crs() function which helps us do that.\n\nst_crs(nga)\n\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n\n\nThe CRS and id match, therefore we can move on to the next step and transform the data into the Nigerian projected coordinate system.\n\n\nAs explained before, using st_transform(), we convert the sf coordinates into the Nigerian projected coordinate system.\n\nnga <- nga %>%\n  st_transform(crs = 26391)\nnga\n\nSimple feature collection with 30 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 178398.7 ymin: 329463.4 xmax: 292278.9 ymax: 452734.9\nProjected CRS: Minna / Nigeria West Belt\nFirst 10 features:\n   Shape_Leng  Shape_Area        ADM2_EN ADM2_PCODE       ADM2_REF ADM2ALT1EN\n1   1.7951405 0.062436080       Aiyedade   NG030001       Aiyedade       <NA>\n2   0.7101503 0.024818478       Aiyedire   NG030002       Aiyedire       <NA>\n3   0.9199564 0.038002894 Atakumosa East   NG030003 Atakumosa East       <NA>\n4   0.8502782 0.030445804 Atakumosa West   NG030004 Atakumosa West       <NA>\n5   0.5212768 0.012213340     Boluwaduro   NG030005     Boluwaduro       <NA>\n6   0.6088930 0.011827501         Boripe   NG030006         Boripe       <NA>\n7   0.4714403 0.008343638      Ede North   NG030007      Ede North       <NA>\n8   0.5660235 0.017623677      Ede South   NG030008      Ede South       <NA>\n9   0.8273123 0.022026327       Egbedore   NG030009       Egbedore       <NA>\n10  1.1304849 0.029791275         Ejigbo   NG030010         Ejigbo       <NA>\n   ADM2ALT2EN ADM1_EN ADM1_PCODE ADM0_EN ADM0_PCODE       date    validOn\n1        <NA>    Osun      NG030 Nigeria         NG 2016-11-29 2019-04-17\n2        <NA>    Osun      NG030 Nigeria         NG 2016-11-29 2019-04-17\n3        <NA>    Osun      NG030 Nigeria         NG 2016-11-29 2019-04-17\n4        <NA>    Osun      NG030 Nigeria         NG 2016-11-29 2019-04-17\n5        <NA>    Osun      NG030 Nigeria         NG 2016-11-29 2019-04-17\n6        <NA>    Osun      NG030 Nigeria         NG 2016-11-29 2019-04-17\n7        <NA>    Osun      NG030 Nigeria         NG 2016-11-29 2019-04-17\n8        <NA>    Osun      NG030 Nigeria         NG 2016-11-29 2019-04-17\n9        <NA>    Osun      NG030 Nigeria         NG 2016-11-29 2019-04-17\n10       <NA>    Osun      NG030 Nigeria         NG 2016-11-29 2019-04-17\n   validTo        SD_EN SD_PCODE                       geometry\n1     <NA>    Osun West  NG03003 MULTIPOLYGON (((215920.8 33...\n2     <NA>    Osun West  NG03003 MULTIPOLYGON (((214352.3 40...\n3     <NA>    Osun East  NG03002 MULTIPOLYGON (((267717.8 37...\n4     <NA>    Osun East  NG03002 MULTIPOLYGON (((250576.1 40...\n5     <NA> Osun Central  NG03001 MULTIPOLYGON (((267547.9 42...\n6     <NA> Osun Central  NG03001 MULTIPOLYGON (((256469.1 43...\n7     <NA>    Osun West  NG03003 MULTIPOLYGON (((238094.5 40...\n8     <NA>    Osun West  NG03003 MULTIPOLYGON (((238094.5 40...\n9     <NA>    Osun West  NG03003 MULTIPOLYGON (((222300.9 42...\n10    <NA>    Osun West  NG03003 MULTIPOLYGON (((216011.1 42...\n\n\nThe projected CRS now corresponds to the Nigerian one, we will be able to perform data wrangling from now on.\n\n\n\n\n\n2.2.2 The geoBoundaries data set\nIn this section, we will follow the same steps as the NGA data set but for the geoBoundaries data this time, however, since we will choose the NGA data over the latter, we can refrain from performing the next steps. Yet, I include the code if one chooses to work with the geoBoundaries data set.\n\nImport datast_crs()st_tansform()\n\n\n\n\nShow code\ngeoNGA = st_read(dsn = \"data/geospatial\",\n                 layer = \"geoBoundaries-NGA-ADM2\")\n\n\n\n\n\n\nShow code\nst_crs(geoNGA)\n\n\n\n\n\n\nShow code\ngeoNGA <- geoNGA %>%\n  st_transform(crs = 26391)\ngeoNGA"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex1.html#geospatial-data-cleaning",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex1.html#geospatial-data-cleaning",
    "title": "Take-home Exercise - Application of Spatial Point Patterns Analysis",
    "section": "3.1 Geospatial Data Cleaning",
    "text": "3.1 Geospatial Data Cleaning\n\n3.1.1 Excluding redundant fields\nTo simplify our work, we shall reduce our data set and use only necessary attributes. Using the select() function, we will choose fields 3, 4, 8, and 9. By doing so, we exclude redundant fields.\n\nnga <- nga %>%\n  dplyr::select(c(3:4, 8:9))\n\nNote that the Geometry field remains in our sf data frame.\n\n\n3.1.2 Checking for duplicated name\nChecking for duplicates is an essential part of data cleaning. Here, we shall check if any … have the same name within the Osun State.\n\nnga$ADM2_EN[duplicated(nga$ADM2_EN)==TRUE]\n\ncharacter(0)\n\n\nThere are no duplicates in the data set. We shall then move on to the data wrangling of the water points."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex1.html#data-wrangling-for-water-point-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex1.html#data-wrangling-for-water-point-data",
    "title": "Take-home Exercise - Application of Spatial Point Patterns Analysis",
    "section": "3.2 Data Wrangling for Water Point Data",
    "text": "3.2 Data Wrangling for Water Point Data\nGiven the nature of our work which focuses on analyzing the distribution of functional and non-functional water points throughout the Osun State in Nigeria, we should explore the attribute that stores such information.\nLooking back at the previous work done, it seems that the field #status_clean indicates the nature of the water point. By using the freq() function from the funModeling package, we display the information about the water points on a bar plot.\n\nfunModeling::freq(data = wp_sf,\n     input = '#status_clean')\n\n\n\n\n                     #status_clean frequency percentage cumulative_perc\n1                       Functional      2319      41.73           41.73\n2                   Non-Functional      2008      36.13           77.86\n3                             <NA>       748      13.46           91.32\n4      Functional but needs repair       248       4.46           95.78\n5 Non-Functional due to dry season       151       2.72           98.50\n6        Functional but not in use        63       1.13           99.63\n7                        Abandoned        15       0.27           99.90\n8         Abandoned/Decommissioned         5       0.09          100.00\n\n\nLooking at the above bar plot, we learn that:\n\n15% of observations are not classified, we should treat that issue next;\nthe functional water points are classified into 3 categories, namely “Functional”, “Functional but needs repair”, and “Functional but in use”;\nthe non-functional water points are classified into 4 categories, namely “Non-Functional”, “Non-Functional due to dry season”, “Abandoned”, and “Abandoned/Decommissioned”;\n\nBefore extracting the water point data, we will simplify our work by creating an alternate data frame using the rename(), select(), and mutate() functions.\n\nWe use rename() to rename the ‘#status_clean’ field to status_clean, it will make data handling easier;\nWe use select() of the dplyr package to include the status_clean attribute in the output sf data frame;\nWe use replace_na() to change all NA values from the status_clean column into unknown.\n\n\nwp_sf_nga <- wp_sf %>% \n  rename(status_clean = '#status_clean') %>%\n  dplyr::select(status_clean) %>%\n  mutate(status_clean = replace_na(\n    status_clean, \"unknown\"))\nhead(wp_sf_nga)\n\nSimple feature collection with 6 features and 1 field\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 237881.5 ymin: 366733.1 xmax: 292542.7 ymax: 445609.1\nProjected CRS: Minna / Nigeria West Belt\n# A tibble: 6 × 2\n  status_clean                        Geometry\n  <chr>                            <POINT [m]>\n1 unknown                  (292542.7 444411.7)\n2 Abandoned/Decommissioned (262341.4 366733.1)\n3 Abandoned/Decommissioned (237881.5 415561.5)\n4 Abandoned/Decommissioned (245966.3 445609.1)\n5 unknown                  (272719.3 427803.4)\n6 unknown                  (273839.2 409007.6)\n\n\n\n3.2.1 Extracting water point data\nIn order to perform tests on the different water point categories, we should extract the water point data according to their status. We will use the function filter() to do so, and shall include all relevant categories to functional and non-functional water points as mentioned earlier.\n\nFunctional Water PointsNon-Functional Water Points\n\n\n\nwp_sf_functional <- wp_sf_nga %>%\n  filter(status_clean %in%\n           c(\"Functional\",\n             \"Functional but not in use\",\n             \"Functional but needs repair\"))\n\n\nfunModeling::freq(data = wp_sf_functional,\n     input = 'status_clean')\n\n\n\n\n                 status_clean frequency percentage cumulative_perc\n1                  Functional      2319      88.17           88.17\n2 Functional but needs repair       248       9.43           97.60\n3   Functional but not in use        63       2.40          100.00\n\n\n\n\n\nwp_sf_nonfunctional <- wp_sf_nga %>%\n  filter(status_clean %in%\n           c(\"Abandoned/Decommissioned\",\n             \"Abandoned\",\n             \"Non-Functional due to dry season\",\n             \"Non-Functional\"))\n\n\nfunModeling::freq(data = wp_sf_nonfunctional,\n                  input = 'status_clean')\n\n\n\n\n                      status_clean frequency percentage cumulative_perc\n1                   Non-Functional      2008      92.15           92.15\n2 Non-Functional due to dry season       151       6.93           99.08\n3                        Abandoned        15       0.69           99.77\n4         Abandoned/Decommissioned         5       0.23          100.00\n\n\n\n\n\n\n\n3.2.2 Performing Point-in-Polygon Count\n\nnga_wp <- nga %>% \n  mutate(`total_wp` = lengths(\n    st_intersects(nga, wp_sf_nga))) %>%\n  mutate(`wp_functional` = lengths(\n    st_intersects(nga, wp_sf_functional))) %>%\n  mutate(`wp_nonfunctional` = lengths(\n    st_intersects(nga, wp_sf_nonfunctional)))\n\n\nFunctional Water PointsNon-Functional Water Points\n\n\n\nggplot(data = nga_wp,\n       aes(x = wp_functional)) + \n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"light blue\") +\n  geom_vline(aes(xintercept=mean(\n    wp_functional, na.rm=T)),\n             color=\"red\", \n             linetype=\"dashed\", \n             size=0.8) +\n  ggtitle(\"Distribution of Functional water points by LGA\") +\n  xlab(\"No. of water points\") +\n  ylab(\"No. of\\nLGAs\") +\n  theme(axis.title.y=element_text(angle = 0))\n\n\n\n\n\n\n\nggplot(data = nga_wp,\n       aes(x = wp_functional)) + \n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"light blue\") +\n  geom_vline(aes(xintercept=mean(\n    wp_functional, na.rm=T)),\n             color=\"red\", \n             linetype=\"dashed\", \n             size=0.8) +\n  ggtitle(\"Distribution of Functional water points by LGA\") +\n  xlab(\"No. of water points\") +\n  ylab(\"No. of\\nLGAs\") +\n  theme(axis.title.y=element_text(angle = 0))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex1.html#converting-sf-data-frames-to-sps-spatial-class",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex1.html#converting-sf-data-frames-to-sps-spatial-class",
    "title": "Take-home Exercise - Application of Spatial Point Patterns Analysis",
    "section": "4.1 Converting sf data frames to sp’s Spatial* class",
    "text": "4.1 Converting sf data frames to sp’s Spatial* class\nThe first step to converting an sf data frame to a ppp class object is to use the as_Spatial() function of the sf package. It converts the geospatial data from sf data frame to sp’s Spatial* class.\nBelow, we perform this transformation on the three data frames.\n\nFunctional Water PointsNon-Functional Water PointsLevel-2 Administrative boundaries\n\n\n\nwp_functional = as_Spatial(wp_sf_functional)\nwp_functional\n\nclass       : SpatialPointsDataFrame \nfeatures    : 2630 \nextent      : 179198.9, 291989.5, 341443.2, 449013.7  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=4.5 +k=0.99975 +x_0=230738.26 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \nvariables   : 1\nnames       :              status_clean \nmin values  :                Functional \nmax values  : Functional but not in use \n\n\nNote that wp_functional is a Spatial Points data frame.\n\n\n\nwp_nonfunctional = as_Spatial(wp_sf_nonfunctional)\nwp_nonfunctional\n\nclass       : SpatialPointsDataFrame \nfeatures    : 2179 \nextent      : 182490.7, 291855.5, 338261.8, 448933.5  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=4.5 +k=0.99975 +x_0=230738.26 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \nvariables   : 1\nnames       :                     status_clean \nmin values  :                        Abandoned \nmax values  : Non-Functional due to dry season \n\n\nNote that wp_nonfunctional is a Spatial Points data frame.\n\n\n\nnga_spat = as_Spatial(nga)\nnga_spat\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 30 \nextent      : 178398.7, 292278.9, 329463.4, 452734.9  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=4.5 +k=0.99975 +x_0=230738.26 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \nvariables   : 4\nnames       :  ADM2_EN, ADM2_PCODE, ADM1_EN, ADM1_PCODE \nmin values  : Aiyedade,   NG030001,    Osun,      NG030 \nmax values  :   Osogbo,   NG030030,    Osun,      NG030 \n\n\nNote that nga_spat is a Spatial Polygons data frame."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex1.html#converting-the-spatial-class-into-generic-sp-format",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex1.html#converting-the-spatial-class-into-generic-sp-format",
    "title": "Take-home Exercise - Application of Spatial Point Patterns Analysis",
    "section": "4.2 Converting the Spatial* class into generic sp format",
    "text": "4.2 Converting the Spatial* class into generic sp format\nSince we are looking to convert the data frames to ppp objects and there are no direct methods to convert Spatial* classes into ppp objects, we shall find an alternative way. We need to convert the Spatial* classes into sp objects first. To do so, we use the as() function to coerce our Spatial* objects to their respective sp classes (e.g., ‘SpatialPoints’ and ‘SpatialPolygons’). We shall perform this transformation on our three data sets.\n\nFunctional Water PointsNon-Functional Water PointsLevel-2 Administrative boundaries\n\n\n\nwp_functional_sp <- as(wp_functional, \"SpatialPoints\")\nwp_functional_sp\n\nclass       : SpatialPoints \nfeatures    : 2630 \nextent      : 179198.9, 291989.5, 341443.2, 449013.7  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=4.5 +k=0.99975 +x_0=230738.26 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \n\n\n\n\n\nwp_nonfunctional_sp <- as(wp_nonfunctional, \"SpatialPoints\")\nwp_nonfunctional_sp\n\nclass       : SpatialPoints \nfeatures    : 2179 \nextent      : 182490.7, 291855.5, 338261.8, 448933.5  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=4.5 +k=0.99975 +x_0=230738.26 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \n\n\n\n\n\nnga_sp <- as(nga_spat, \"SpatialPolygons\")\nnga_sp\n\nclass       : SpatialPolygons \nfeatures    : 30 \nextent      : 178398.7, 292278.9, 329463.4, 452734.9  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=4.5 +k=0.99975 +x_0=230738.26 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex1.html#converting-the-generic-sp-format-into-spatstats-ppp-format",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex1.html#converting-the-generic-sp-format-into-spatstats-ppp-format",
    "title": "Take-home Exercise - Application of Spatial Point Patterns Analysis",
    "section": "4.3 Converting the generic sp format into spatstat’s ppp format",
    "text": "4.3 Converting the generic sp format into spatstat’s ppp format\n\nFunctional Water PointsNon-Functional Water Points\n\n\n\nwp_functional_ppp <- as(wp_functional_sp, \"ppp\")\nwp_functional_ppp\n\nPlanar point pattern: 2630 points\nwindow: rectangle = [179198.89, 291989.51] x [341443.2, 449013.7] units\n\n\n\nplot(wp_functional_ppp)\n\n\n\n\n\nsummary(wp_functional_ppp)\n\nPlanar point pattern:  2630 points\nAverage intensity 2.167651e-07 points per square unit\n\nCoordinates are given to 2 decimal places\ni.e. rounded to the nearest multiple of 0.01 units\n\nWindow: rectangle = [179198.89, 291989.51] x [341443.2, 449013.7] units\n                    (112800 x 107600 units)\nWindow area = 12132900000 square units\n\n\n\n\n\nwp_nonfunctional_ppp <- as(wp_nonfunctional_sp, \"ppp\")\nwp_nonfunctional_ppp\n\nPlanar point pattern: 2179 points\nwindow: rectangle = [182490.74, 291855.52] x [338261.8, 448933.5] units\n\n\n\nplot(wp_nonfunctional_sp)\n\n\n\n\n\nsummary(wp_nonfunctional_sp)\n\nObject of class SpatialPoints\nCoordinates:\n               min      max\ncoords.x1 182490.7 291855.5\ncoords.x2 338261.8 448933.5\nIs projected: TRUE \nproj4string :\n[+proj=tmerc +lat_0=4 +lon_0=4.5 +k=0.99975 +x_0=230738.26 +y_0=0\n+a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m\n+no_defs]\nNumber of points: 2179"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex1.html#creating-owin-object",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex1.html#creating-owin-object",
    "title": "Take-home Exercise - Application of Spatial Point Patterns Analysis",
    "section": "4.4 Creating owin object",
    "text": "4.4 Creating owin object\nStill using the as() function, we will be creating an owin object out of the nga_sp data frame. It is the perfect way to confine our analysis to the Osun State, Nigeria. As you may see next.\n\nnga_owin <- as(nga_sp, \"owin\")\nnga_owin\n\nwindow: polygonal boundary\nenclosing rectangle: [178398.73, 292278.89] x [329463.4, 452734.9] units\n\n\n\nplot(nga_owin)\n\n\n\n\n\nsummary(nga_owin)\n\nWindow: polygonal boundary\n30 separate polygons (no holes)\n            vertices      area relative.area\npolygon 1        204 762071000       0.08870\npolygon 2         81 302752000       0.03520\npolygon 3         97 463731000       0.05400\npolygon 4        124 371376000       0.04320\npolygon 5         60 148866000       0.01730\npolygon 6         84 144185000       0.01680\npolygon 7         50 101744000       0.01180\npolygon 8         72 214941000       0.02500\npolygon 9        112 268551000       0.03120\npolygon 10       125 363188000       0.04230\npolygon 11        83 110665000       0.01290\npolygon 12       126 191669000       0.02230\npolygon 13       219 899941000       0.10500\npolygon 14       174 737731000       0.08580\npolygon 15        81 138238000       0.01610\npolygon 16        65 118917000       0.01380\npolygon 17        90 279120000       0.03250\npolygon 18        69  69522200       0.00809\npolygon 19        69  42545300       0.00495\npolygon 20        49  30312400       0.00353\npolygon 21        62 262061000       0.03050\npolygon 22        93 436496000       0.05080\npolygon 23        87 272566000       0.03170\npolygon 24       105 507853000       0.05910\npolygon 25        98 290780000       0.03380\npolygon 26        64 325957000       0.03790\npolygon 27       133 108439000       0.01260\npolygon 28       122 460358000       0.05360\npolygon 29        94 109183000       0.01270\npolygon 30        95  60955300       0.00709\nenclosing rectangle: [178398.73, 292278.89] x [329463.4, 452734.9] units\n                     (113900 x 123300 units)\nWindow area = 8594710000 square units\nFraction of frame area: 0.612"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex1.html#combining-point-events-object-and-owin-object",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex1.html#combining-point-events-object-and-owin-object",
    "title": "Take-home Exercise - Application of Spatial Point Patterns Analysis",
    "section": "4.5 Combining point events object and owin object",
    "text": "4.5 Combining point events object and owin object\nwe shall end our geospatial data wrangling by extracting the functional and non-functional water points located within the Osun State in Nigeria. Using the code chunks below help us do that.\n\nFunctional Water PointsNon-Functional Water Points\n\n\n\nwp_functional_ppp = wp_functional_ppp[nga_owin]\nplot(wp_functional_ppp)\n\n\n\n\n\n\n\nwp_nonfunctional_ppp = wp_nonfunctional_ppp[nga_owin]\nplot(wp_nonfunctional_ppp)\n\n\n\n\n\n\n\nLooking at the plots above, we obtain two point maps with the water points located within the nga_owin object, so within the Osun State."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex1.html#kernel-density-estimation",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex1.html#kernel-density-estimation",
    "title": "Take-home Exercise - Application of Spatial Point Patterns Analysis",
    "section": "5.1 Kernel Density Estimation",
    "text": "5.1 Kernel Density Estimation\nOur first step to KDE is to derive two density maps for functional and non-functional water points to check for any potential data problem. Here, we suspect that the scale of density values will be expressed in meters. The default measurement unit of Nigeria’s projected coordinate system – EPSG:26391 – is expressed in meters. We shall verify that and correct it to kilometers to get a more desirable map output (scale).\nFor starters, we should use the density() function to compute kernel density estimates for both types of water points. We will use two methods for smoothing the bandwidth for the kernel estimation point process intensity.\n\nAdaptive BandwidthAutomatic Bandwidth\n\n\nThe first method uses adaptive estimate of the intensity function of a point pattern. We plot side-by-side the KDE maps for functional and non-functional WP.\n\n\nShow code\nkde_wpfunc.m <- adaptive.density(wp_functional_ppp,\n                                  method = \"kernel\")\n\nkde_wpnonfunc.m <- adaptive.density(wp_nonfunctional_ppp,\n                                     method = \"kernel\")\n\npar(mfrow=c(1,2))\nplot(kde_wpfunc.m,\n     main = \"Functional Water Points\",\n     ribside=c(\"bottom\"))\nplot(kde_wpnonfunc.m,\n     main = \"Non-Functional Water Points\",\n     ribside=c(\"bottom\"))\n\n\n\n\n\nWe observe potential clustering as some areas of the maps seem to have higher concentration of observations.\nWe also observe that the scale is set in meters, thus we will take action and re-scale our data points to kilometers.\n\n\nPlease find an alternative method for computing the bandwidth of our kernel density estimations.\n\n\nShow code\nkde_wpfunc.mppl <- density(wp_functional_ppp, \n                               sigma=bw.ppl, \n                               edge=TRUE)\n\nkde_wpnonfunc.mppl <- density(wp_nonfunctional_ppp,\n                             sigma=bw.ppl,\n                             edge=TRUE)\n\npar(mfrow=c(1,2))\nplot(kde_wpfunc.mppl, \n     main = \"Functional Water Points\",\n     ribside=c(\"bottom\"))\nplot(kde_wpnonfunc.mppl,\n     main = \"Non-Functional Water Points\",\n     ribside=c(\"bottom\"))\n\n\n\n\n\n\n\n\nThe density values of the output range from 0 to 0.000006 and it makes for an output difficult to comprehend and interpret. Thus, we will re-scale our density values to get an output in “number of points per square kilometer”.\n\n5.1.1 Re-scalling KDE values\nTo change the scale of the density values, we use the rescale() function from the spatstat.geom package. Here, we multiply values of our two objects of class ppp by 1000. We thus express them in kilometers and define the unit name to be “km”.\n\nwp_functional_ppp.km <- rescale(wp_functional_ppp, 1000, \"km\")\n\nwp_nonfunctional_ppp.km <- rescale(wp_nonfunctional_ppp, 1000, \"km\")\n\nWe can now run the previously used density() function using the re-scaled data and plot the output KDE map.\n\nAdaptive BandwidthAutomatic Bandwidth\n\n\n\n\nShow code\nkde_wpfunc.km <- adaptive.density(wp_functional_ppp.km,\n                                  method = \"kernel\")\n\nkde_wpnonfunc.km <- adaptive.density(wp_nonfunctional_ppp.km,\n                                     method = \"kernel\")\n\npar(mfrow=c(1,2))\nplot(kde_wpfunc.km,\n     main = \"Functional Water Points\",\n     ribside=c(\"bottom\"))\nplot(kde_wpnonfunc.km,\n     main = \"Non-Functional Water Points\",\n     ribside=c(\"bottom\"))\n\n\n\n\n\n\n\n\n\nShow code\nkde_wpfunc.ppl <- density(wp_functional_ppp.km,\n                          sigma = bw.ppl,\n                          edge = TRUE)\n\nkde_wpnonfunc.ppl <- density(wp_nonfunctional_ppp.km,\n                             sigma = bw.ppl,\n                             edge = TRUE)\n\npar(mfrow=c(1,2))\nplot(kde_wpfunc.ppl,\n     main = \"Functional Water Points\",\n     ribside=c(\"bottom\"))\nplot(kde_wpnonfunc.ppl,\n     main = \"Non-Functional Water Points\",\n     ribside=c(\"bottom\"))\n\n\n\n\n\n\n\n\nWe start observing signs of potential clustering but, for now, we shall focus on transforming our im objects into rasters to plot our KDE maps using the tmap package. We will talk more about CSR and clustering later.\n\n\n5.1.2 Convert KDE output into grid object\nHere, we convert our KDE objects into grid objects for mapping purposes.\n\nAdaptive BandwidthAutomatic Bandwidth\n\n\n\n\nShow code\ngridded_wpfunc <- as.SpatialGridDataFrame.im(kde_wpfunc.km)\ngridded_wpnonfunc <- as.SpatialGridDataFrame.im(kde_wpnonfunc.km)\n\nspplot(gridded_wpfunc)\nspplot(gridded_wpnonfunc)\n\n\n\n\n\n\n\nFunctional Water Points\n\n\n\n\n\n\n\nNon-Functional Water Points\n\n\n\n\n\n\n\n\n\n\nShow code\ngridded_wpfunc.ppl <- as.SpatialGridDataFrame.im(kde_wpfunc.ppl)\ngridded_wpnonfunc.ppl <- as.SpatialGridDataFrame.im(kde_wpnonfunc.ppl)\n\nspplot(gridded_wpfunc.ppl)\nspplot(gridded_wpnonfunc.ppl)\n\n\n\n\n\n\n\nFunctional Water Points\n\n\n\n\n\n\n\nNon-Functional Water Points\n\n\n\n\n\n\n\n\n\n\n\n5.1.3 Converting grid object into raster\nNow, we shall convert the gridded KDE objects into RasterLayer objects using the raster() function of the raster package. RasterLayer objects being compatible with the tmap functions, it allows us to plot our KDE map using OpenStreetView.\n\nAdaptive BandwidthAutomatic Bandwidth\n\n\n\nkde_wpfunc_raster <- raster(gridded_wpfunc)\nkde_wpnonfunc_raster <- raster(gridded_wpnonfunc)\n\nkde_wpfunc_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.8896887, 0.9630582  (x, y)\nextent     : 178.3987, 292.2789, 329.4634, 452.7349  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : v \nvalues     : 1.702123e-16, 26.9948  (min, max)\n\nkde_wpnonfunc_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.8896887, 0.9630582  (x, y)\nextent     : 178.3987, 292.2789, 329.4634, 452.7349  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : v \nvalues     : 2.624981e-14, 23.06775  (min, max)\n\n\nNote that the CRS is NA.\n\n\n\nkde_wpfunc_raster.ppl <- raster(gridded_wpfunc.ppl)\nkde_wpnonfunc_raster.ppl <- raster(gridded_wpnonfunc.ppl)\n\nkde_wpfunc_raster.ppl\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.8896887, 0.9630582  (x, y)\nextent     : 178.3987, 292.2789, 329.4634, 452.7349  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : v \nvalues     : -3.514656e-16, 11.15238  (min, max)\n\nkde_wpnonfunc_raster.ppl\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.8896887, 0.9630582  (x, y)\nextent     : 178.3987, 292.2789, 329.4634, 452.7349  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : v \nvalues     : -3.628555e-16, 10.26005  (min, max)\n\n\nNote that the CRS is NA.\n\n\n\n\n\n5.1.4 Assigning projection systems\n\nFunctional Water PointsNon-functional Water Points\n\n\n\n\nShow code\nprojection(kde_wpfunc_raster) <- CRS(\"+init=EPSG:26391 +datum:WGS84 +units=km\")\nprojection(kde_wpfunc_raster.ppl) <- CRS(\"+init=EPSG:26391 +datum:WGS84 +units=km\")\n\nkde_wpfunc_raster\n\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.8896887, 0.9630582  (x, y)\nextent     : 178.3987, 292.2789, 329.4634, 452.7349  (xmin, xmax, ymin, ymax)\ncrs        : +init=EPSG:26391 +datum:WGS84 +units=km \nsource     : memory\nnames      : v \nvalues     : 1.702123e-16, 26.9948  (min, max)\n\n\nShow code\nkde_wpfunc_raster.ppl\n\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.8896887, 0.9630582  (x, y)\nextent     : 178.3987, 292.2789, 329.4634, 452.7349  (xmin, xmax, ymin, ymax)\ncrs        : +init=EPSG:26391 +datum:WGS84 +units=km \nsource     : memory\nnames      : v \nvalues     : -3.514656e-16, 11.15238  (min, max)\n\n\n\n\n\n\nShow code\nprojection(kde_wpnonfunc_raster) <- CRS(\"+init=EPSG:26391 +datum:WGS84 +units=km\")\nprojection(kde_wpnonfunc_raster.ppl) <- CRS(\"+init=EPSG:26391 +datum:WGS84 +units=km\")\n\nkde_wpnonfunc_raster\n\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.8896887, 0.9630582  (x, y)\nextent     : 178.3987, 292.2789, 329.4634, 452.7349  (xmin, xmax, ymin, ymax)\ncrs        : +init=EPSG:26391 +datum:WGS84 +units=km \nsource     : memory\nnames      : v \nvalues     : 2.624981e-14, 23.06775  (min, max)\n\n\nShow code\nkde_wpnonfunc_raster.ppl\n\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.8896887, 0.9630582  (x, y)\nextent     : 178.3987, 292.2789, 329.4634, 452.7349  (xmin, xmax, ymin, ymax)\ncrs        : +init=EPSG:26391 +datum:WGS84 +units=km \nsource     : memory\nnames      : v \nvalues     : -3.628555e-16, 10.26005  (min, max)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex1.html#visualizing-kde-with-tmap",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex1.html#visualizing-kde-with-tmap",
    "title": "Take-home Exercise - Application of Spatial Point Patterns Analysis",
    "section": "5.2 Visualizing KDE with tmap",
    "text": "5.2 Visualizing KDE with tmap\nSince we converted our KDE maps to raster objects, we will be able to plot the maps with the tmap package. Using the tm_basemap() function, we set OpenStreetMap as the default view mode on our interactive map. Then, using tm_shape() and tm_raster(), we plot the density estimates on the map and the Osun State layer.\n\nFunctional WP mapNon-functional WP map\n\n\n\ntmap_mode('view')\ntm_basemap(\"OpenStreetMap\") +\ntm_shape(kde_wpfunc_raster) +\n  tm_raster(\"v\")\n\n\n\n\n\n\n\n\ntmap_mode('view')\ntm_basemap(\"OpenStreetMap\") +\ntm_shape(kde_wpnonfunc_raster) +\n  tm_raster(\"v\")\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\n\n\n\n\n5.2.1 Conclusion\nThe kernel density maps reveal locations with higher density of functional and non-functional water points. We observe density peaks of up to 27 functional water points and 23 non-functional water points.\nIt seems that we can observe clusters of functional and non-functional water points across the Osun state, however, this is just an intuition and it should be validated with further testing.\nLooking back at the point maps and comparing with these new KDE maps, it seems obvious that the latter offers much better clarity in terms of interpretation. What appeared to look like strongly concentrated functional and non-functional water points on the lint map, now looks much neater and many of these zones disappear.\nThe KDE maps help us get a better understanding of the concentration and intensity. The point map gives us only a rough idea and no clear possible interpretation.\nHowever, we should note that KDE maps are only good to display the data in an understandable manner. I believe that extra-work should be put into understanding what factors may explain the higher density zones and if there are any correlation between the location of functional and non-functional water points."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex1.html#nearest-neighbor-index",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex1.html#nearest-neighbor-index",
    "title": "Take-home Exercise - Application of Spatial Point Patterns Analysis",
    "section": "5.3 Nearest Neighbor Index",
    "text": "5.3 Nearest Neighbor Index\nBefore moving on to the Second-order Spatial Points Analysis, I would like to perform the Clark-Evans test to measure aggregation of functional and non-functional water points. The goal is to test the randomness of the data points and assess whether they are randomly distributed, clustered or dispersed.\nWe will perform a series of 2 tests, first on functional water points and, second, on non-functional water points. We will be using the clarkevans.test() function of the spatstat package.\nThe hypotheses are the following:\nTest 1\nH0 : Functional Water Points are randomly distributed\nH1 : Functional Water Points are not randomly distributed, they are clustered\nTest 2\nH0 : Non-functional Water Points are randomly distributed\nH1 : Non-functional Water Points are not randomly distributed, they are clustered\nAs you may have read above, we determine the alternative hypothesis to be that water points are clustered. This decision is based on an intuition that derives from the previously seen visual representations of functional and non-functional water points. Indeed, we observed in our KDE plots some concentration of data points across the Osun State. Thus, we would like to test for clustering directly to prove this intuition.\nPlease note that when conducting our tests, we will use a 5% significance level.\n\nTest on Functional Water PointsTest on Non-Functional Water Points\n\n\nFirst test on functional water points.\n\nclarkevans.test(wp_functional_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"clustered\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Monte Carlo test based on 99 simulations of CSR with fixed n\n\ndata:  wp_functional_ppp\nR = 0.44265, p-value = 0.01\nalternative hypothesis: clustered (R < 1)\n\n\n\n\nSecond test on non-functional water points\n\nclarkevans.test(wp_nonfunctional_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"clustered\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Monte Carlo test based on 99 simulations of CSR with fixed n\n\ndata:  wp_nonfunctional_ppp\nR = 0.43223, p-value = 0.01\nalternative hypothesis: clustered (R < 1)\n\n\n\n\n\n\n5.3.1 Conclusion of the test\nSince both p-values of the respective tests (0.01 and 0.01) are below the significance level and that the R-values are below 1, we reject the null hypothesis suggesting that functional and non-functional water points are clustered. Note that this is just a preliminary test and that we shall confirm this conclusion using second-order spatial point patterns analysis methods."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex1.html#formulate-the-null-hypothesis-and-alternative-hypothesis-and-select-the-confidence-level",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex1.html#formulate-the-null-hypothesis-and-alternative-hypothesis-and-select-the-confidence-level",
    "title": "Take-home Exercise - Application of Spatial Point Patterns Analysis",
    "section": "6.1 Formulate the null hypothesis and alternative hypothesis and select the confidence level",
    "text": "6.1 Formulate the null hypothesis and alternative hypothesis and select the confidence level\nH0 : Functional Water Points are randomly distributed\nH1 : Functional Water Points are not randomly distributed\nWe will be using a 5% significance level in our tests. By doing so, we will be running 40 Monte-Carlo simulations and it should contribute to making the code easier to run."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex1.html#perform-the-test-by-using-appropriate-second-order-spatial-point-patterns-analysis-technique",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex1.html#perform-the-test-by-using-appropriate-second-order-spatial-point-patterns-analysis-technique",
    "title": "Take-home Exercise - Application of Spatial Point Patterns Analysis",
    "section": "6.2 Perform the test by using appropriate Second order spatial point patterns analysis technique",
    "text": "6.2 Perform the test by using appropriate Second order spatial point patterns analysis technique\nThis first piece of code you can find just below is the code you would use to perform a single analysis for Functional Water Points in the case of the code chunk below.\n\n\nShow code\nL_wpfunc = Lest(wp_functional_ppp, correction = \"Ripley\")\nplot(L_wpfunc, . -r ~ r, ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\nThis second piece of code is the one you would use to perform a Monte-Carlo simulation on Functional Water Points in the Osun State of Nigeria. As explained, the computational power of my laptop does not allow me to run the code chunk in a reasonable amount of time, so I will be doing Admin Level-2 boudary analysis.\n\n\nShow code\nL_wp1.csr <- envelope(wp_functional_ppp, Lest, nsim = 39, rank = 1, glocal=TRUE)\nplot(L_wp1.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\", main = \"L-test for Functional Water Points in Osun State\")\n\n\n\nFunctional Water PointsNon-Functional Water Points\n\n\n\nfor (i in 1:30){\n  print(paste(\"Test\", i))\n  print(paste(\"Now analyzing Administrative Level-2:\", nga$ADM2_EN[i]))\n  \n  nga1 = nga[i,]\n  \n  nga_spat = as_Spatial(nga1)\n  nga_sp = as(nga_spat, \"SpatialPolygons\")\n  nga_owin = as(nga_sp, \"owin\")\n  \n  wp_functional_R = wp_functional_ppp[nga_owin]\n  \n  L_wp1.csr <- envelope(wp_functional_R, Lest, nsim = 39, rank = 1, glocal=TRUE)\n  \n  title = paste(\"L-test for Functional Water Points in\", nga$ADM2_EN[i])\n  plot(L_wp1.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\", main = title)\n  \n  print(\"—————————————————————————————————————————————————————————————————————\")\n}\n\n[1] \"Test 1\"\n[1] \"Now analyzing Administrative Level-2: Aiyedade\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Test 2\"\n[1] \"Now analyzing Administrative Level-2: Aiyedire\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Test 3\"\n[1] \"Now analyzing Administrative Level-2: Atakumosa East\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Test 4\"\n[1] \"Now analyzing Administrative Level-2: Atakumosa West\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Test 5\"\n[1] \"Now analyzing Administrative Level-2: Boluwaduro\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Test 6\"\n[1] \"Now analyzing Administrative Level-2: Boripe\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Test 7\"\n[1] \"Now analyzing Administrative Level-2: Ede North\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Test 8\"\n[1] \"Now analyzing Administrative Level-2: Ede South\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Test 9\"\n[1] \"Now analyzing Administrative Level-2: Egbedore\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Test 10\"\n[1] \"Now analyzing Administrative Level-2: Ejigbo\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Test 11\"\n[1] \"Now analyzing Administrative Level-2: Ife Central\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Test 12\"\n[1] \"Now analyzing Administrative Level-2: Ife East\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Test 13\"\n[1] \"Now analyzing Administrative Level-2: Ife North\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Test 14\"\n[1] \"Now analyzing Administrative Level-2: Ife South\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Test 15\"\n[1] \"Now analyzing Administrative Level-2: Ifedayo\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Test 16\"\n[1] \"Now analyzing Administrative Level-2: Ifelodun\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Test 17\"\n[1] \"Now analyzing Administrative Level-2: Ila\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Test 18\"\n[1] \"Now analyzing Administrative Level-2: Ilesha East\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Test 19\"\n[1] \"Now analyzing Administrative Level-2: Ilesha West\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Test 20\"\n[1] \"Now analyzing Administrative Level-2: Irepodun\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Test 21\"\n[1] \"Now analyzing Administrative Level-2: Irewole\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Test 22\"\n[1] \"Now analyzing Administrative Level-2: Isokan\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Test 23\"\n[1] \"Now analyzing Administrative Level-2: Iwo\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Test 24\"\n[1] \"Now analyzing Administrative Level-2: Obokun\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Test 25\"\n[1] \"Now analyzing Administrative Level-2: Odo-Otin\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Test 26\"\n[1] \"Now analyzing Administrative Level-2: Ola-oluwa\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Test 27\"\n[1] \"Now analyzing Administrative Level-2: Olorunda\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Test 28\"\n[1] \"Now analyzing Administrative Level-2: Oriade\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Test 29\"\n[1] \"Now analyzing Administrative Level-2: Orolu\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Test 30\"\n[1] \"Now analyzing Administrative Level-2: Osogbo\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n\n\n\n\n\nfor (i in 1:30){\n  print(paste(\"Now analyzing Administrative Level-2:\", nga$ADM2_EN[i]))\n  \n  nga1 = nga[i,]\n  \n  nga_spat = as_Spatial(nga1)\n  nga_sp = as(nga_spat, \"SpatialPolygons\")\n  nga_owin = as(nga_sp, \"owin\")\n  \n  wp_nonfunctional_R = wp_nonfunctional_ppp[nga_owin]\n  \n  L_wp2.csr <- envelope(wp_nonfunctional_R, Lest, nsim = 39, rank = 1, glocal=TRUE)\n  \n  title = paste(\"L-test for Non-Functional Water Points in\", nga$ADM2_EN[i])\n  plot(L_wp2.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\", main = title)\n  \n  print(\"—————————————————————————————————————————————————————————————————————\")\n}\n\n[1] \"Now analyzing Administrative Level-2: Aiyedade\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Now analyzing Administrative Level-2: Aiyedire\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Now analyzing Administrative Level-2: Atakumosa East\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Now analyzing Administrative Level-2: Atakumosa West\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Now analyzing Administrative Level-2: Boluwaduro\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Now analyzing Administrative Level-2: Boripe\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Now analyzing Administrative Level-2: Ede North\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Now analyzing Administrative Level-2: Ede South\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Now analyzing Administrative Level-2: Egbedore\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Now analyzing Administrative Level-2: Ejigbo\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Now analyzing Administrative Level-2: Ife Central\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Now analyzing Administrative Level-2: Ife East\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Now analyzing Administrative Level-2: Ife North\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Now analyzing Administrative Level-2: Ife South\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Now analyzing Administrative Level-2: Ifedayo\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Now analyzing Administrative Level-2: Ifelodun\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Now analyzing Administrative Level-2: Ila\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Now analyzing Administrative Level-2: Ilesha East\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Now analyzing Administrative Level-2: Ilesha West\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Now analyzing Administrative Level-2: Irepodun\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Now analyzing Administrative Level-2: Irewole\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Now analyzing Administrative Level-2: Isokan\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Now analyzing Administrative Level-2: Iwo\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Now analyzing Administrative Level-2: Obokun\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Now analyzing Administrative Level-2: Odo-Otin\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Now analyzing Administrative Level-2: Ola-oluwa\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Now analyzing Administrative Level-2: Olorunda\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Now analyzing Administrative Level-2: Oriade\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Now analyzing Administrative Level-2: Orolu\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\"\n[1] \"Now analyzing Administrative Level-2: Osogbo\"\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\n\n\n[1] \"—————————————————————————————————————————————————————————————————————\""
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex1.html#with-reference-to-the-analysis-results-draw-statistical-conclusions",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex1.html#with-reference-to-the-analysis-results-draw-statistical-conclusions",
    "title": "Take-home Exercise - Application of Spatial Point Patterns Analysis",
    "section": "6.3 With reference to the analysis results, draw statistical conclusions",
    "text": "6.3 With reference to the analysis results, draw statistical conclusions\nTo make the purpose of drawing statistical conclusion, I will walk you through the interpretation of the first three level-2 administrative boundaries for functional water points.\nLooking at the Aiyedade boundary, we see that the observed L value is above the theoretical line and directly jumps above the envelope. Given our observation, we can conclude that at a 5% significance level, the functional water points in Aiyedade are concentrated. Spatial clustering is statistically significant.\nLooking at the Aiyedire boundary, we have the same statistical conclusion. The L values are always above the upper limit of the envelope, meaning that spatial clustering of functional water points is statistically significant at a 5% signifance level.\nFinally, looking at the Atakumose East boundary, we see that at a distance of 0 to 2100, L values are above the higher limit of the envelope, so the clustering is statistically significant. Between distances of 2100 - 3900 and 4100 - 5000, the L values are located within the envelope, so spatial clustering for these distances is not significant. Between distances of 3900 and 4100, the L values are below the lower limit of the envelope, meaning that spatial dispersion for these distances is statistically significant."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex1.html#visualizing-the-sf-layers",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex1.html#visualizing-the-sf-layers",
    "title": "Take-home Exercise - Application of Spatial Point Patterns Analysis",
    "section": "7.1 Visualizing the sf layers",
    "text": "7.1 Visualizing the sf layers\nFirst, we rename the status into two main groups, functional and non-functional. It will help us in our local collocation quotient analysis. Using the mutate() and recode() functions, we can do as explained above.\n\nwater_points = wp_sf_nga %>%\n  mutate(status_clean = recode(status_clean, \"Functional but not in use\" = 'Functional', \"Functional but needs repair\" = 'Functional', \"Abandoned/Decommissioned\" = 'Non-Functional', \"Abandoned\" = 'Non-Functional', \"Non-Functional due to dry season\" = 'Non-Functional')) %>%\n  filter(status_clean %in%\n           c(\"Functional\",\n             \"Non-Functional\"))\n\nWe then visualize the new categories on a map using the tmap package.\n\ntmap_mode(\"view\")\ntm_shape(nga)+\n  tm_polygons()+\ntm_shape(st_intersection(water_points, nga))+\n  tm_dots(col = \"status_clean\",\n          size = 0.01,\n          border.col = \"black\",\n          border.lwd = 0.5)+\n  tm_view(set.zoom.limits = c(9, 12))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex1.html#formulate-the-null-hypothesis-and-alternative-hypothesis-and-select-the-confidence-level-1",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex1.html#formulate-the-null-hypothesis-and-alternative-hypothesis-and-select-the-confidence-level-1",
    "title": "Take-home Exercise - Application of Spatial Point Patterns Analysis",
    "section": "7.2 Formulate the null hypothesis and alternative hypothesis and select the confidence level",
    "text": "7.2 Formulate the null hypothesis and alternative hypothesis and select the confidence level\nH0 : Functional and Non-Functional Water Points are randomly distributed\nH1 : Functional and Non-Functional Water Points are not randomly distributed (e.g.,they are collocated or isolated)\nWe will use a 5% significance level, in other words, a 95% confidence level."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex1.html#perform-the-test-by-using-appropriate-second-order-spatial-point-patterns-analysis-technique-1",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex1.html#perform-the-test-by-using-appropriate-second-order-spatial-point-patterns-analysis-technique-1",
    "title": "Take-home Exercise - Application of Spatial Point Patterns Analysis",
    "section": "7.3 Perform the test by using appropriate Second order spatial point patterns analysis technique",
    "text": "7.3 Perform the test by using appropriate Second order spatial point patterns analysis technique\n\nnb = include_self(st_knn(st_geometry(water_points), 6))\n\nwt = st_kernel_weights(nb, water_points, \"gaussian\", adaptive = TRUE)\n\n\nfunctional = water_points %>%\n  filter(status_clean %in%\n           c(\"Functional\",\n             \"Functional but not in use\",\n             \"Functional but needs repair\"))\n\nA = functional$status_clean\n\n\nnonfunctional = water_points %>%\n  filter(status_clean %in%\n           c(\"Abandoned/Decommissioned\",\n             \"Abandoned\",\n             \"Non-Functional due to dry season\",\n             \"Non-Functional\"))\n\nB = nonfunctional$status_clean\n\n\nLCLQ = local_colocation(A, B, nb, wt, 99)\n\n\nLCLQ_wp = cbind(water_points, LCLQ)\n\n\ntmap_mode(\"view\")\ntm_shape(nga)+\n  tm_polygons()+\ntm_shape(st_intersection(LCLQ_wp, nga))+\n  tm_dots(col = c(\"Non.Functional\"),\n          size = 0.01,\n          border.col = \"black\",\n          border.lwd = 0.5)+\n  tm_view(set.zoom.limits = c(9, 12))\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\n\nhead(LCLQ_wp[order(LCLQ_wp$p_sim_Non.Functional),])\n\nSimple feature collection with 6 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 194356.6 ymin: 391744.6 xmax: 233001.2 ymax: 413752\nProjected CRS: Minna / Nigeria West Belt\n    status_clean Non.Functional p_sim_Non.Functional                  Geometry\n14    Functional      0.9995411                 0.01   POINT (194356.6 402721)\n60    Functional      0.9995411                 0.01 POINT (233001.2 391744.6)\n98    Functional      0.9995411                 0.01 POINT (203199.2 407215.7)\n103   Functional      0.9995411                 0.01 POINT (223227.3 405443.6)\n115   Functional      0.9995411                 0.01   POINT (223962.7 413164)\n116   Functional      0.9995411                 0.01   POINT (232691.4 413752)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex1.html#with-reference-to-the-analysis-results-draw-statistical-conclusions-1",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex1.html#with-reference-to-the-analysis-results-draw-statistical-conclusions-1",
    "title": "Take-home Exercise - Application of Spatial Point Patterns Analysis",
    "section": "7.4 With reference to the analysis results, draw statistical conclusions",
    "text": "7.4 With reference to the analysis results, draw statistical conclusions\nWhen cross referencing the points indicated on our above map as statistically significant and our data frame, we observe that their Local Collocation Quotient tends towards 1. It means that for each feature A – namely Functional Water Points - it is as likely to have a category B feature – Non-Functional Water Points - as we might expect (interpretation based on ArcGIS Pro tool referencing)."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "title": "Take-home Exercise - Application of Spatial Point Patterns Analysis",
    "section": "",
    "text": "pacman::p_load(sf, sfdep, tmap, plyr, tidyverse, readxl, magrittr, knitr)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#computing-global-moran-i",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#computing-global-moran-i",
    "title": "In-class Exercise - Application of Spatial Point Patterns Analysis",
    "section": "3.1 Computing Global Moran’ I",
    "text": "3.1 Computing Global Moran’ I\n\nmoranI = global_moran(wm_q$GDPPC,\n                      wm_q$nb,\n                      wm_q$wt)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#performing-global-moran-i-test",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#performing-global-moran-i-test",
    "title": "In-class Exercise - Application of Spatial Point Patterns Analysis",
    "section": "3.2 Performing Global Moran’ I test",
    "text": "3.2 Performing Global Moran’ I test\n\nglobal_moran_test(wm_q$GDPPC, \n                  wm_q$nb,\n                  wm_q$wt)\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\nLook at the p-value, we will reject the null hypothesis. Moran statistic is above 0, it indicates signs of cluster.\n\n3.2.1 Performing Global Moran’ I permutation test\n\nset.seed(1234)\n\n\nglobal_moran_perm(wm_q$GDPPC, \n                  wm_q$nb,\n                  wm_q$wt,\n                  nsim = 99)\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.30075, observed rank = 100, p-value < 2.2e-16\nalternative hypothesis: two.sided"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#computing-local-moran-i",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#computing-local-moran-i",
    "title": "In-class Exercise - Application of Spatial Point Patterns Analysis",
    "section": "3.3 Computing local Moran’ I",
    "text": "3.3 Computing local Moran’ I\n\nlisa = wm_q %>%\n  mutate(local_moran = local_moran(GDPPC, nb, wt, nsim = 99),\n         .before = 1) %>%\n  unnest(local_moran)\n\nlisa\n\nSimple feature collection with 88 features and 20 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n# A tibble: 88 × 21\n         ii        eii   var_ii    z_ii    p_ii p_ii_…¹ p_fol…² skewn…³ kurtosis\n      <dbl>      <dbl>    <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>    <dbl>\n 1 -0.00147  0.00177    4.18e-4 -0.158  0.874      0.82    0.41  -0.812  0.652  \n 2  0.0259   0.00641    1.05e-2  0.190  0.849      0.96    0.48  -1.09   1.89   \n 3 -0.0120  -0.0374     1.02e-1  0.0796 0.937      0.76    0.38   0.824  0.0461 \n 4  0.00102 -0.0000349  4.37e-6  0.506  0.613      0.64    0.32   1.04   1.61   \n 5  0.0148  -0.00340    1.65e-3  0.449  0.654      0.5     0.25   1.64   3.96   \n 6 -0.0388  -0.00339    5.45e-3 -0.480  0.631      0.82    0.41   0.614 -0.264  \n 7  3.37    -0.198      1.41e+0  3.00   0.00266    0.08    0.04   1.46   2.74   \n 8  1.56    -0.265      8.04e-1  2.04   0.0417     0.08    0.04   0.459 -0.519  \n 9  4.42     0.0450     1.79e+0  3.27   0.00108    0.02    0.01   0.746 -0.00582\n10 -0.399   -0.0505     8.59e-2 -1.19   0.234      0.28    0.14  -0.685  0.134  \n# … with 78 more rows, 12 more variables: mean <fct>, median <fct>,\n#   pysal <fct>, nb <nb>, wt <list>, NAME_2 <chr>, ID_3 <int>, NAME_3 <chr>,\n#   ENGTYPE_3 <chr>, County <chr>, GDPPC <dbl>, geometry <POLYGON [°]>, and\n#   abbreviated variable names ¹​p_ii_sim, ²​p_folded_sim, ³​skewness"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#visualizing-local-moran-i",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#visualizing-local-moran-i",
    "title": "In-class Exercise - Application of Spatial Point Patterns Analysis",
    "section": "3.4 Visualizing local Moran’ I",
    "text": "3.4 Visualizing local Moran’ I\n\ntmap_mode(\"plot\")\ntm_shape(lisa)+\n  tm_fill(\"ii\")+\n  tm_borders(alpha = 0.5)+\n  tm_view(set.zoom.limits = c(6, 8))\n\n\n\n\n\ntmap_mode(\"plot\")\ntm_shape(lisa)+\n  tm_fill(\"p_ii\")+\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#computing-local-g",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#computing-local-g",
    "title": "In-class Exercise - Application of Spatial Point Patterns Analysis",
    "section": "3.5 Computing local G*",
    "text": "3.5 Computing local G*\n\nHCSA = wm_q %>%\n  mutate(local_Gi = local_gstar_perm(GDPPC, nb, wt, nsim = 99),\n         .before = 1) %>%\n  unnest(local_Gi)\n\nHCSA\n\nSimple feature collection with 88 features and 16 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n# A tibble: 88 × 17\n    gi_star   e_gi     var_gi  p_value p_sim p_fol…¹ skewn…² kurto…³ nb    wt   \n      <dbl>  <dbl>      <dbl>    <dbl> <dbl>   <dbl>   <dbl>   <dbl> <nb>  <lis>\n 1 -0.00567 0.0115 0.00000812  9.95e-1  0.82    0.41   1.03    1.23  <int> <dbl>\n 2 -0.235   0.0110 0.00000581  8.14e-1  1       0.5    0.912   1.05  <int> <dbl>\n 3  0.298   0.0114 0.00000776  7.65e-1  0.7     0.35   0.455  -0.732 <int> <dbl>\n 4  0.145   0.0121 0.0000111   8.84e-1  0.64    0.32   0.900   0.726 <int> <dbl>\n 5  0.356   0.0113 0.0000119   7.21e-1  0.64    0.32   1.08    1.31  <int> <dbl>\n 6 -0.480   0.0116 0.00000706  6.31e-1  0.82    0.41   0.364  -0.676 <int> <dbl>\n 7  3.66    0.0116 0.00000825  2.47e-4  0.02    0.01   0.909   0.664 <int> <dbl>\n 8  2.14    0.0116 0.00000714  3.26e-2  0.16    0.08   1.13    1.48  <int> <dbl>\n 9  4.55    0.0113 0.00000656  5.28e-6  0.02    0.01   1.36    4.14  <int> <dbl>\n10  1.61    0.0109 0.00000341  1.08e-1  0.18    0.09   0.269  -0.396 <int> <dbl>\n# … with 78 more rows, 7 more variables: NAME_2 <chr>, ID_3 <int>,\n#   NAME_3 <chr>, ENGTYPE_3 <chr>, County <chr>, GDPPC <dbl>,\n#   geometry <POLYGON [°]>, and abbreviated variable names ¹​p_folded_sim,\n#   ²​skewness, ³​kurtosis\n\n\n##Visualizing local G*\n\ntmap_mode(\"view\")\ntm_shape(HCSA)+\n  tm_fill(\"gi_star\")+\n  tm_borders(alpha = 0.5)+\n  tm_view(set.zoom.limits = c(6, 8))\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\ntm_shape(HCSA)+\n  tm_fill(\"p_sim\")+\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#install-and-load-new-packages",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#install-and-load-new-packages",
    "title": "In-class Exercise - Application of Spatial Point Patterns Analysis",
    "section": "4.1 Install and Load new packages",
    "text": "4.1 Install and Load new packages\n\npacman::p_load(plotly, zoo)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#importing-data-1",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#importing-data-1",
    "title": "In-class Exercise - Application of Spatial Point Patterns Analysis",
    "section": "4.2 Importing data",
    "text": "4.2 Importing data\n\n4.2.1 Import Aspatial data\n\nGDPPC = read_csv(\"data/aspatial/hunan_GDPPC.csv\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#creating-a-time-series-cube",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#creating-a-time-series-cube",
    "title": "In-class Exercise - Application of Spatial Point Patterns Analysis",
    "section": "4.3 Creating a Time Series cube",
    "text": "4.3 Creating a Time Series cube\n\nGDPPC_st = spacetime(GDPPC, hunanGeo,\n                     .loc_col = \"County\",\n                     .time_col = \"Year\")\n\n\nGDPPC_nb = GDPPC_st %>%\n  activate(\"geometry\") %>%\n  mutate(nb = include_self(st_contiguity(geometry)),\n         wt = st_weights(nb)) %>%\n  set_nbs(\"nb\") %>%\n  set_wts(\"wt\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#compute-gi",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#compute-gi",
    "title": "In-class Exercise - Application of Spatial Point Patterns Analysis",
    "section": "4.4 Compute Gi*",
    "text": "4.4 Compute Gi*"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#geospatial-data",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#geospatial-data",
    "title": "Take-home Exercise - Application of Spatial Point Patterns Analysis",
    "section": "2.1 Geospatial data",
    "text": "2.1 Geospatial data\n\ndki = st_read(dsn = \"data/geospatial\",\n             layer = \"BATAS_DESA_DESEMBER_2019_DUKCAPIL_DKI_JAKARTA\")\n\nReading layer `BATAS_DESA_DESEMBER_2019_DUKCAPIL_DKI_JAKARTA' from data source \n  `C:\\p-haas\\IS415\\Take-home_Ex\\Take-home_Ex02\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 269 features and 161 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 106.3831 ymin: -6.370815 xmax: 106.9728 ymax: -5.184322\nGeodetic CRS:  WGS 84\n\n\n\n2.1.1 Data exploration\n\ndki = dki %>%\n  select(c(1:9))\n\n\n2.1.1.1 Transform CRS\n\ndki %>%\n  st_crs()\n\n\ndki = dki %>%\n  st_transform(crs=23837)\n\n\n\n2.1.1.2 Check NA values and duplicates\n\nany(is.na(dki))\n\n\nhead(dki[is.na(dki$DESA_KELUR),])\n\nThe Kelurahan information seems to be missing. We will be using the DESA and KODE_DESA to cross check with the aspatial data what may be the name to fill in the rows. We could consider dropping these two rows now, but I prefer to wait and confirm before dropping NA values."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#aspatial-data",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#aspatial-data",
    "title": "Take-home Exercise - Application of Spatial Point Patterns Analysis",
    "section": "2.2 Aspatial data",
    "text": "2.2 Aspatial data\nSince we need to merge a series of data sets, we will first take a quick look a them to understand what are the relevant fields for our analysis and what work needs to be performed to have one single data set that will allow us to find the monthly vaccination rate.\nThe first step is to look at the data set of June 2021. Even though this data set takes record of data from the month prior our analysis period (July 2021 - June 2022) and does not seem relevant, I still think that it is important to compute the monthly vaccination (in dosis administered) and consequently we start with the data of June 2021.\n\nvaccination = read_excel(\"data/aspatial/before.xlsx\")\nglimpse(vaccination)\n\nRows: 268\nColumns: 21\n$ `KODE KELURAHAN`                             <chr> NA, \"3172051003\", \"317304…\n$ `WILAYAH KOTA`                               <chr> NA, \"JAKARTA UTARA\", \"JAK…\n$ KECAMATAN                                    <chr> NA, \"PADEMANGAN\", \"TAMBOR…\n$ KELURAHAN                                    <chr> \"TOTAL\", \"ANCOL\", \"ANGKE\"…\n$ SASARAN                                      <dbl> 7739060, 20393, 25785, 25…\n$ `BELUM VAKSIN`                               <dbl> 5113425, 13394, 16743, 19…\n$ `JUMLAH\\r\\nDOSIS 1`                          <dbl> 2623759, 6992, 9033, 6082…\n$ `JUMLAH\\r\\nDOSIS 2`                          <dbl> 1179448, 3277, 3217, 2636…\n$ `TOTAL VAKSIN\\r\\nDIBERIKAN`                  <dbl> 3803207, 10269, 12250, 87…\n$ `LANSIA\\r\\nDOSIS 1`                          <dbl> 502210, 1296, 1999, 816, …\n$ `LANSIA\\r\\nDOSIS 2`                          <dbl> 448944, 1128, 1746, 702, …\n$ `LANSIA TOTAL \\r\\nVAKSIN DIBERIKAN`          <dbl> 951154, 2424, 3745, 1518,…\n$ `PELAYAN PUBLIK\\r\\nDOSIS 1`                  <dbl> 2014605, 5551, 6859, 4959…\n$ `PELAYAN PUBLIK\\r\\nDOSIS 2`                  <dbl> 654533, 2044, 1364, 1726,…\n$ `PELAYAN PUBLIK TOTAL\\r\\nVAKSIN DIBERIKAN`   <dbl> 2669138, 7595, 8223, 6685…\n$ `GOTONG ROYONG\\r\\nDOSIS 1`                   <dbl> 33766, 44, 84, 99, 56, 73…\n$ `GOTONG ROYONG\\r\\nDOSIS 2`                   <dbl> 10610, 12, 27, 22, 13, 24…\n$ `GOTONG ROYONG TOTAL\\r\\nVAKSIN DIBERIKAN`    <dbl> 44376, 56, 111, 121, 69, …\n$ `TENAGA KESEHATAN\\r\\nDOSIS 1`                <dbl> 73178, 101, 91, 208, 70, …\n$ `TENAGA KESEHATAN\\r\\nDOSIS 2`                <dbl> 65361, 93, 80, 186, 63, 3…\n$ `TENAGA KESEHATAN TOTAL\\r\\nVAKSIN DIBERIKAN` <dbl> 138539, 194, 171, 394, 13…\n\n\nUsing the glimpse() function we can take a look at the different fields of the data sets that will be imported next. Looking at the fields, it looks like we will be selecting only 3 fields:\n\nKELURAHAN; this field gives information about the sub-district\nSASARAN; this field represents the vaccination target of each sub-district\nBELUM VAKSIN; this field informs about the population that is yet-to-be vaccinated\n\nBefore moving on with the examination of the aspatial data, we shall quickly check for the missing values found in the previous data frame.\n\nvaccination %>%\n  filter(`KODE KELURAHAN` == 31888888)\n\nWe may want to check based on the name and will be looking for cells that may contain the DANAU string.\n\nvaccination %>%\n  filter(grepl('Danau', KELURAHAN))\n\nIt seems like we can drop the two rows from the dki data set, however, for the purpose of our analysis, I prefer to keep these two sub-districts in the data frame. We may have missing values in our choropleth maps, but it is no problem.\nPlease find the code chunk necessary to drop NA values in case you deem it to be necessary.\n\ndki = na.omit(dki)\n\n\nvaccination = vaccination %>%\n  select(4, 5, 6) %>%\n  rename(\"Initial Target\" = 2, \"Initial Yet-to-be Vaccinated\" = 3)\n\nNow that we have taken a look at the data and selected the relevant fields, we can move on with the data cleaning and merge the vaccination data from July 2021 to June 2022 into the vaccination data frame.\nTo do so, we will be using a for loop in which we will be performing the following tasks:\n\nCreate a list called months that stores the name of every month in our analysis period, this will allow us to customize the name of the columns;\nLine 1 and 2 of the loop help us count the month number of our analysis. If you take a quick peak into the later data sets, it seems like Indonesia and the Jakarta region adopted a 3-dosis vaccination plan, meaning that the TOTAL VAKSIN DIBERIKAN is now located on the 10th column from March 2022 on-wards;\nUsing the paste() function, we replicate the name of the data sets stored in our data folder and use the read_excel() function of the readxl package, we store the data frame into the variable df;\nThe remaining part of the code serves the purpose of storing Vaccination target data and Yet-to-be Vaccinated data;\n\n\ncount = 0\nmonths = c('July', 'August', 'September', 'October', \n           'November', 'December', 'January', 'February', \n           'March', 'April', 'May', 'June')\n\nfor (i in months){\n  filename = paste(\"data/aspatial/\", i, \".xlsx\", sep = \"\")\n  df = read_excel(filename)\n  \n  colname1 = paste(\"Yet-to-be Vaccinated\", i)\n  colname2 = paste(\"Target\", i)\n  \n  vaccination[colname2] = df %>%\n    select(5)\n  vaccination[colname1] = df %>%\n    select(6)\n}\n\nBefore merging the aspatial data – vaccination data frame – with the geospatial data – dki data frame – we will perform some data exploration to remove any redundant fields and look for any potential duplicates or missing values.\n\n2.2.1 Data exploration\nWe will begin our data exploration by looking at the target columns. I have an intuition that target data might be the same across some periods of our analysis. To do so, we select only the columns that contain the string Target using the grepl() function.\n\nhead(vaccination[ , grepl( \"Target\" , names( vaccination ) ) ])\n\nLooking at the above print, it looks like target data is the same across our 12-month analysis period, thus we will drop the all the above columns and keep only one column for our reference.\n\nZ = vaccination %>%\n  select(4) %>%\n  setNames(c(\"Vaccination Target\"))\n\nvaccination = cbind(vaccination[ , !grepl( \"Target\" , names( vaccination ) ) ], Z)\n\n\nhead(vaccination)\n\nLooking at the above print, we have successfully replaceed all the target columns for a single one that is now located at the right end of the data frame. We will push it to the front with the following code chunk.\n\nvaccination = vaccination %>% \n  relocate(\"Vaccination Target\", .after=\"KELURAHAN\")\n\n\nkable(head(vaccination))\n\nNow, we will look for any potential redundant fields or duplicated regions. We shall use the code chunk below to check for duplicates.\n\nany(duplicated(vaccination))\n\nThere are no duplicates in the data frame. Finally, we will look for NA values.\n\nany(is.na(vaccination))\n\nThere are no missing values in the data frame, we will now move on to merging the data frame vaccination with the kdi sf data frame."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#data-visualization",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#data-visualization",
    "title": "Take-home Exercise - Application of Spatial Point Patterns Analysis",
    "section": "3.1 Data visualization",
    "text": "3.1 Data visualization\n\ntmap_mode(\"plot\")\nqtm(dataMerged)\n\n\n\n\nIt looks like the Pulau Islands are included in our data frame. We will take the necessary steps to remove them from the sf data frame."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#data-cleaning",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#data-cleaning",
    "title": "Take-home Exercise - Application of Spatial Point Patterns Analysis",
    "section": "3.2 Data cleaning",
    "text": "3.2 Data cleaning\n\ndataCleaned = dataMerged %>% \n  filter(!grepl('PULAU', DESA_KELUR))\n\n\ntmap_mode(\"plot\")\nqtm(dataCleaned)\n\n\n\n\nWe can now start answering the objectives of the Hands-on Exercise 2."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#monthly-vaccination-rate",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#monthly-vaccination-rate",
    "title": "Take-home Exercise - Application of Spatial Point Patterns Analysis",
    "section": "4.1 Monthly Vaccination Rate",
    "text": "4.1 Monthly Vaccination Rate\n\nvac_minus1 = dataCleaned %>%\n  extract2(colnames(dataCleaned)[grepl(\"Initial\" , names(dataCleaned))])\nvac_target = dataCleaned %>%\n  extract2(colnames(dataCleaned)[grepl(\"Target\" , names(dataCleaned))])\n\nfor (i in months){\n  \n  vac_current = dataCleaned %>%\n  extract2(colnames(dataCleaned)[grepl(i , names(dataCleaned))])\n  \n  colname = paste(\"Vaccination Rate for\", i, sep = \" \")\n  dataCleaned[colname] = abs(vac_current - vac_minus1) / vac_target\n  \n  vac_minus1 = vac_current\n}"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#part-b",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#part-b",
    "title": "Take-home Exercise - Application of Spatial Point Patterns Analysis",
    "section": "4.2 Part B",
    "text": "4.2 Part B\n\nvac_rate = c(colnames(dataCleaned)[grepl(\"Vaccination Rate\" , colnames(dataCleaned))])\n\ntm_shape(dataCleaned)+\n  tm_fill(vac_rate, \n          style = \"jenks\",\n          palette = \"Blues\")+\n  tm_borders(alpha = 0.5)+\n  tm_layout(legend.position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#part-c",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#part-c",
    "title": "Take-home Exercise - Application of Spatial Point Patterns Analysis",
    "section": "4.3 Part C",
    "text": "4.3 Part C"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#monthly-vaccination-rate-computation",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#monthly-vaccination-rate-computation",
    "title": "Take-home Exercise - Application of Spatial Point Patterns Analysis",
    "section": "4.1 Monthly Vaccination Rate Computation",
    "text": "4.1 Monthly Vaccination Rate Computation\n\nvac_minus1 = dataCleaned %>%\n  extract2(colnames(dataCleaned)[grepl(\"Initial\" , names(dataCleaned))])\nvac_target = dataCleaned %>%\n  extract2(colnames(dataCleaned)[grepl(\"Target\" , names(dataCleaned))])\n\nfor (i in months){\n  \n  vac_current = dataCleaned %>%\n  extract2(colnames(dataCleaned)[grepl(i , names(dataCleaned))])\n  \n  colname = paste(\"Vaccination_Rate_for\", i, sep = \"_\")\n  dataCleaned[colname] = abs(vac_current - vac_minus1) / vac_target\n  \n  vac_minus1 = vac_current\n}\n\ndataCleaned = dataCleaned[, !grepl(\"Yet-to-be\", colnames(dataCleaned))]"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#monthly-vaccination-rate-visualization",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#monthly-vaccination-rate-visualization",
    "title": "Take-home Exercise - Application of Spatial Point Patterns Analysis",
    "section": "4.2 Monthly Vaccination Rate Visualization",
    "text": "4.2 Monthly Vaccination Rate Visualization\n\nvac_rate = c(colnames(dataCleaned)[grepl(\"Vaccination_Rate\" , colnames(dataCleaned))])\n\ntm_shape(dataCleaned) +\n  tm_fill(vac_rate, \n          style = \"jenks\",\n          palette = \"Blues\") +\n  tm_layout(title = gsub(\"_\", \" \", vac_rate),\n            title.position = c(\"center\", \"top\"),\n            legend.position = c(\"left\", \"bottom\"),\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"4star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#conclusion",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#conclusion",
    "title": "Take-home Exercise - Application of Spatial Point Patterns Analysis",
    "section": "4.3 Conclusion",
    "text": "4.3 Conclusion\nhere…"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#compute-local-gi-values",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#compute-local-gi-values",
    "title": "Take-home Exercise - Application of Spatial Point Patterns Analysis",
    "section": "5.1 Compute local Gi* values",
    "text": "5.1 Compute local Gi* values\n\nwm_idw <- na.omit(dataCleaned) %>%\n  mutate(nb = st_contiguity(geometry),\n         wts = st_inverse_distance(nb, geometry,\n                                   scale = 1,\n                                   alpha = 1),\n         .before = 1)\n\n\nlocal_gi = function(df, varname) {\n  df1 = df %>%\n    st_set_geometry(NULL)\n  HCSA = df %>% \n    mutate(local_Gi = local_gstar_perm(df1[, grepl(varname, names(df))],\n                                       nb, wt, nsim = 99),\n           .before = 1) %>%\n    unnest(local_Gi)\n}"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#gi-maps-of-monthly-vaccination-rate",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#gi-maps-of-monthly-vaccination-rate",
    "title": "Take-home Exercise - Application of Spatial Point Patterns Analysis",
    "section": "5.2 Gi* maps of monthly vaccination rate",
    "text": "5.2 Gi* maps of monthly vaccination rate\n\nmap_plot = function(df, varname){\n  tm_shape(df) +\n    tm_fill(\"gi_star\", midpoint = NA) + \n    tm_layout(title = gsub(\"_\", \" \", varname),\n            legend.position = c(\"left\", \"bottom\"),\n            frame = TRUE) +\n    tm_borders(alpha = 0.5)\n}\n\n\ncolumns = colnames(wm_idw)[grepl(\"Vaccination_Rate\", names(wm_idw))]\n\nfor (i in 1:12){\n  if (i < 12){\n    map = map_plot(local_gi(wm_idw, columns[i]), months[i])\n    assign(paste(\"map_\", i, sep = \"\"), map)\n  } else {\n    HCSA = wm_idw %>% \n      mutate(local_Gi = local_gstar_perm(Vaccination_Rate_for_June,\n                                         nb, wt, \n                                         nsim = 99),\n             .before = 1) %>%\n      unnest(local_Gi)\n  assign(paste(\"map_\", i, sep = \"\"), map_plot(HCSA, months[12]))\n  }\n}\n\n\ntmap_arrange(map_1, map_2, map_3, map_4,\n             ncol=2)\n\n\n\ntmap_arrange(map_5, map_6, map_7, map_8,\n             ncol=2)\n\n\n\ntmap_arrange(map_9, map_10, map_11, map_12,\n             ncol=2)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#conclusion-1",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#conclusion-1",
    "title": "Take-home Exercise - Application of Spatial Point Patterns Analysis",
    "section": "5.3 Conclusion",
    "text": "5.3 Conclusion"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#mann-kendall-test",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#mann-kendall-test",
    "title": "Take-home Exercise - Application of Spatial Point Patterns Analysis",
    "section": "6.1 Mann-Kendall Test",
    "text": "6.1 Mann-Kendall Test"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#temporal-trends-in",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#temporal-trends-in",
    "title": "Take-home Exercise - Application of Spatial Point Patterns Analysis",
    "section": "6.2 Temporal Trends in …",
    "text": "6.2 Temporal Trends in …"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#ehsa-map-of-gi-values",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#ehsa-map-of-gi-values",
    "title": "Take-home Exercise - Application of Spatial Point Patterns Analysis",
    "section": "6.3 EHSA map of Gi* values",
    "text": "6.3 EHSA map of Gi* values"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#spatial-patterns-description",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#spatial-patterns-description",
    "title": "Take-home Exercise - Application of Spatial Point Patterns Analysis",
    "section": "6.4 Spatial Patterns description",
    "text": "6.4 Spatial Patterns description"
  }
]