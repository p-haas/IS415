{
  "hash": "5ebeb24ec4fc2b6d942b1e657ea29496",
  "result": {
    "markdown": "---\ntitle: \"In-Class Exercise - Geospatial Data Wrangling\"\nsubtitle: \"Session 2\"\nexecute: \n  warning: false\ndate-modified: \"2023-03-19\"\n---\n\n\n# 1 Installing and Loading R Packages\n\n## 1.1 Libraries - *sf* & *tidyverse*\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, tidyverse, readr, funModeling)\n```\n:::\n\n\n# 2 Handling Geospatial data\n\n## 2.1 Import shp file - Geospatial data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnga = st_read(dsn = \"data/geospatial\",\n                   layer = \"nga_admbnda_adm2\") %>% st_transform(crs = 26391)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `nga_admbnda_adm2' from data source \n  `C:\\p-haas\\IS415\\In-class_Ex\\In-class_Ex02\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n```\n:::\n:::\n\n\n## 2.2 Understanding the data\n\n### 2.2.1 Nigeria Level-2 Administrative Boundary (example)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_geometry(nga)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGeometry set for 774 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 28879.72 ymin: 30292.37 xmax: 1343798 ymax: 1094244\nProjected CRS: Minna / Nigeria West Belt\nFirst 5 geometries:\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(nga)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 774\nColumns: 17\n$ Shape_Leng <dbl> 0.2370744, 0.2624772, 3.0753158, 2.5379842, 0.6871498, 1.06…\n$ Shape_Area <dbl> 0.0015239210, 0.0035311037, 0.3268678399, 0.0683785064, 0.0…\n$ ADM2_EN    <chr> \"Aba North\", \"Aba South\", \"Abadam\", \"Abaji\", \"Abak\", \"Abaka…\n$ ADM2_PCODE <chr> \"NG001001\", \"NG001002\", \"NG008001\", \"NG015001\", \"NG003001\",…\n$ ADM2_REF   <chr> \"Aba North\", \"Aba South\", \"Abadam\", \"Abaji\", \"Abak\", \"Abaka…\n$ ADM2ALT1EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM2ALT2EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1_EN    <chr> \"Abia\", \"Abia\", \"Borno\", \"Federal Capital Territory\", \"Akwa…\n$ ADM1_PCODE <chr> \"NG001\", \"NG001\", \"NG008\", \"NG015\", \"NG003\", \"NG011\", \"NG02…\n$ ADM0_EN    <chr> \"Nigeria\", \"Nigeria\", \"Nigeria\", \"Nigeria\", \"Nigeria\", \"Nig…\n$ ADM0_PCODE <chr> \"NG\", \"NG\", \"NG\", \"NG\", \"NG\", \"NG\", \"NG\", \"NG\", \"NG\", \"NG\",…\n$ date       <date> 2016-11-29, 2016-11-29, 2016-11-29, 2016-11-29, 2016-11-29…\n$ validOn    <date> 2019-04-17, 2019-04-17, 2019-04-17, 2019-04-17, 2019-04-17…\n$ validTo    <date> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ SD_EN      <chr> \"Abia South\", \"Abia South\", \"Borno North\", \"Federal Capital…\n$ SD_PCODE   <chr> \"NG00103\", \"NG00103\", \"NG00802\", \"NG01501\", \"NG00302\", \"NG0…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((552560.3 12..., MULTIPOLYGON (…\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# head(nga)\n```\n:::\n\n\n## 2.3 Importing Aspatial data into R Workbook\n\n### 2.3.1 Import csv file - Aspatial data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwpdx_nigeria = filter(read_csv(\"data/aspatial/Water_Point_Data_Exchange_-_Plus__WPdx__.csv\"), `#clean_country_name` == \"Nigeria\")\n```\n:::\n\n\n### 2.3.2 Convert Aspatial into Geospatial data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwpdx_nigeria$Geometry = st_as_sfc(wpdx_nigeria$`New Georeferenced Column`)\nwpdx_sf = st_sf(wpdx_nigeria, crs = 4326) %>% st_transform(crs = 26391)\nwpdx_sf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 95008 features and 70 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 32536.82 ymin: 33461.24 xmax: 1292096 ymax: 1091052\nProjected CRS: Minna / Nigeria West Belt\n# A tibble: 95,008 × 71\n   row_id `#source`      #lat_…¹ #lon_…² #repo…³ #stat…⁴ #wate…⁵ #wate…⁶ #wate…⁷\n *  <dbl> <chr>            <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 429068 GRID3             7.98    5.12 08/29/… Unknown <NA>    <NA>    Tapsta…\n 2 222071 Federal Minis…    6.96    3.60 08/16/… Yes     Boreho… Well    Mechan…\n 3 160612 WaterAid          6.49    7.93 12/04/… Yes     Boreho… Well    Hand P…\n 4 160669 WaterAid          6.73    7.65 12/04/… Yes     Boreho… Well    <NA>   \n 5 160642 WaterAid          6.78    7.66 12/04/… Yes     Boreho… Well    Hand P…\n 6 160628 WaterAid          6.96    7.78 12/04/… Yes     Boreho… Well    Hand P…\n 7 160632 WaterAid          7.02    7.84 12/04/… Yes     Boreho… Well    Hand P…\n 8 642747 Living Water …    7.33    8.98 10/03/… Yes     Boreho… Well    Mechan…\n 9 642456 Living Water …    7.17    9.11 10/03/… Yes     Boreho… Well    Hand P…\n10 641347 Living Water …    7.20    9.22 03/28/… Yes     Boreho… Well    Hand P…\n# … with 94,998 more rows, 62 more variables: `#water_tech_category` <chr>,\n#   `#facility_type` <chr>, `#clean_country_name` <chr>, `#clean_adm1` <chr>,\n#   `#clean_adm2` <chr>, `#clean_adm3` <chr>, `#clean_adm4` <chr>,\n#   `#install_year` <dbl>, `#installer` <chr>, `#rehab_year` <lgl>,\n#   `#rehabilitator` <lgl>, `#management_clean` <chr>, `#status_clean` <chr>,\n#   `#pay` <chr>, `#fecal_coliform_presence` <chr>,\n#   `#fecal_coliform_value` <dbl>, `#subjective_quality` <chr>, …\n```\n:::\n:::\n\n\n# 3 Geospatial Data Cleaning\n\n## 3.1 Exclude redundant fields\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnga <- nga %>%\n  select(c(3:4, 8:9))\n```\n:::\n\n\n## 3.2 Checking for duplicates with IFELSE() statement\n\n\n::: {.cell}\n\n```{.r .cell-code}\nduplicated_LGA <- nga$ADM2_EN[duplicated(nga$ADM2_EN)==TRUE]\nnga$ADM2_EN = ifelse(nga$ADM2_EN %in% duplicated_LGA, paste(nga$ADM2_EN, nga$ADM1_EN, sep=\", \"), nga$ADM2_EN)\n```\n:::\n\n\n# 4 Data Wrangling for Water Point Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfreq(data = wpdx_sf, input = '#status_clean')\n```\n\n::: {.cell-output-display}\n![](In-class_Ex02_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n                     #status_clean frequency percentage cumulative_perc\n1                       Functional     45883      48.29           48.29\n2                   Non-Functional     29385      30.93           79.22\n3                             <NA>     10656      11.22           90.44\n4      Functional but needs repair      4579       4.82           95.26\n5 Non-Functional due to dry season      2403       2.53           97.79\n6        Functional but not in use      1686       1.77           99.56\n7         Abandoned/Decommissioned       234       0.25           99.81\n8                        Abandoned       175       0.18           99.99\n9 Non functional due to dry season         7       0.01          100.00\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwp_sf_nga <- wpdx_sf %>% \n  rename(status_clean = '#status_clean') %>%\n  select(status_clean) %>%\n  mutate(status_clean = replace_na(\n    status_clean, \"unknown\"))\n```\n:::\n\n\n## 4.1 Extracting Water Point Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwp_functional <- wp_sf_nga %>%\n  filter(status_clean %in%\n           c(\"Functional\",\n             \"Functional but not in use\",\n             \"Functional but needs repair\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwp_nonfunctional <- wp_sf_nga %>%\n  filter(status_clean %in%\n           c(\"Abandoned/Decommissioned\",\n             \"Abandoned\",\n             \"Non-Functional due to dry season\",\n             \"Non-Functional\",\n             \"Non functional due to dry season\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwp_unknown <- wp_sf_nga %>%\n  filter(status_clean == \"unknown\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfreq(data = wp_functional,\n     input = 'status_clean')\n```\n\n::: {.cell-output-display}\n![](In-class_Ex02_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n                 status_clean frequency percentage cumulative_perc\n1                  Functional     45883      87.99           87.99\n2 Functional but needs repair      4579       8.78           96.77\n3   Functional but not in use      1686       3.23          100.00\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfreq(data = wp_nonfunctional,\n     input = 'status_clean')\n```\n\n::: {.cell-output-display}\n![](In-class_Ex02_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n                      status_clean frequency percentage cumulative_perc\n1                   Non-Functional     29385      91.25           91.25\n2 Non-Functional due to dry season      2403       7.46           98.71\n3         Abandoned/Decommissioned       234       0.73           99.44\n4                        Abandoned       175       0.54           99.98\n5 Non functional due to dry season         7       0.02          100.00\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfreq(data = wp_unknown,\n     input = 'status_clean')\n```\n\n::: {.cell-output-display}\n![](In-class_Ex02_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n  status_clean frequency percentage cumulative_perc\n1      unknown     10656        100             100\n```\n:::\n:::\n\n\n## 4.2 Performing Point-in-Polygon Count\n\n\n::: {.cell}\n\n```{.r .cell-code}\nNGA_wp <- nga %>% \n  mutate(`total_wp` = lengths(\n    st_intersects(nga, wp_sf_nga))) %>%\n  mutate(`wp_functional` = lengths(\n    st_intersects(nga, wp_functional))) %>%\n  mutate(`wp_nonfunctional` = lengths(\n    st_intersects(nga, wp_nonfunctional))) %>%\n  mutate(`wp_unknown` = lengths(\n    st_intersects(nga, wp_unknown)))\n```\n:::\n\n\n## 4.3 Visualing attributes by using statistical graphs\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = NGA_wp,\n       aes(x = total_wp)) + \n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"light blue\") +\n  geom_vline(aes(xintercept=mean(\n    total_wp, na.rm=T)),\n             color=\"red\", \n             linetype=\"dashed\", \n             size=0.8) +\n  ggtitle(\"Distribution of total water points by LGA\") +\n  xlab(\"No. of water points\") +\n  ylab(\"No. of\\nLGAs\") +\n  theme(axis.title.y=element_text(angle = 0))\n```\n\n::: {.cell-output-display}\n![](In-class_Ex02_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n## 4.4 Saving the analytical data in rds format\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(NGA_wp, \"data/rds/NGA_wp.rds\")\n```\n:::\n",
    "supporting": [
      "In-class_Ex02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}