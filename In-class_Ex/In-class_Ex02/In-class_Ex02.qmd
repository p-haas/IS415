---
title: "In-Class Exercise - Geospatial Data Wrangling"
subtitle: "Session 2"
execute: 
  warning: false
date-modified: "`r Sys.Date()`"
---

# 1 Installing and Loading R Packages

## 1.1 Libraries - *sf* & *tidyverse*

```{r}
pacman::p_load(sf, tidyverse, readr, funModeling)
```

# 2 Handling Geospatial data

## 2.1 Import shp file - Geospatial data

```{r}
nga = st_read(dsn = "data/geospatial",
                   layer = "nga_admbnda_adm2") %>% st_transform(crs = 26391)
```

## 2.2 Understanding the data

### 2.2.1 Nigeria Level-2 Administrative Boundary (example)

```{r}
st_geometry(nga)
```

```{r}
glimpse(nga)
```

```{r}
# head(nga)
```

## 2.3 Importing Aspatial data into R Workbook

### 2.3.1 Import csv file - Aspatial data

```{r}
wpdx_nigeria = filter(read_csv("data/aspatial/Water_Point_Data_Exchange_-_Plus__WPdx__.csv"), `#clean_country_name` == "Nigeria")
```

### 2.3.2 Convert Aspatial into Geospatial data

```{r}
wpdx_nigeria$Geometry = st_as_sfc(wpdx_nigeria$`New Georeferenced Column`)
wpdx_sf = st_sf(wpdx_nigeria, crs = 4326) %>% st_transform(crs = 26391)
wpdx_sf
```

# 3 Geospatial Data Cleaning

## 3.1 Exclude redundant fields

```{r}
nga <- nga %>%
  select(c(3:4, 8:9))
```

## 3.2 Checking for duplicates with IFELSE() statement

```{r}
duplicated_LGA <- nga$ADM2_EN[duplicated(nga$ADM2_EN)==TRUE]
nga$ADM2_EN = ifelse(nga$ADM2_EN %in% duplicated_LGA, paste(nga$ADM2_EN, nga$ADM1_EN, sep=", "), nga$ADM2_EN)
```

# 4 Data Wrangling for Water Point Data

```{r}
freq(data = wpdx_sf, input = '#status_clean')
```

```{r}
wp_sf_nga <- wpdx_sf %>% 
  rename(status_clean = '#status_clean') %>%
  select(status_clean) %>%
  mutate(status_clean = replace_na(
    status_clean, "unknown"))
```

## 4.1 Extracting Water Point Data

```{r}
wp_functional <- wp_sf_nga %>%
  filter(status_clean %in%
           c("Functional",
             "Functional but not in use",
             "Functional but needs repair"))
```

```{r}
wp_nonfunctional <- wp_sf_nga %>%
  filter(status_clean %in%
           c("Abandoned/Decommissioned",
             "Abandoned",
             "Non-Functional due to dry season",
             "Non-Functional",
             "Non functional due to dry season"))
```

```{r}
wp_unknown <- wp_sf_nga %>%
  filter(status_clean == "unknown")
```

```{r}
freq(data = wp_functional,
     input = 'status_clean')
```

```{r}
freq(data = wp_nonfunctional,
     input = 'status_clean')
```

```{r}
freq(data = wp_unknown,
     input = 'status_clean')
```

## 4.2 Performing Point-in-Polygon Count

```{r}
NGA_wp <- nga %>% 
  mutate(`total_wp` = lengths(
    st_intersects(nga, wp_sf_nga))) %>%
  mutate(`wp_functional` = lengths(
    st_intersects(nga, wp_functional))) %>%
  mutate(`wp_nonfunctional` = lengths(
    st_intersects(nga, wp_nonfunctional))) %>%
  mutate(`wp_unknown` = lengths(
    st_intersects(nga, wp_unknown)))
```

## 4.3 Visualing attributes by using statistical graphs

```{r}
ggplot(data = NGA_wp,
       aes(x = total_wp)) + 
  geom_histogram(bins=20,
                 color="black",
                 fill="light blue") +
  geom_vline(aes(xintercept=mean(
    total_wp, na.rm=T)),
             color="red", 
             linetype="dashed", 
             size=0.8) +
  ggtitle("Distribution of total water points by LGA") +
  xlab("No. of water points") +
  ylab("No. of\nLGAs") +
  theme(axis.title.y=element_text(angle = 0))
```

## 4.4 Saving the analytical data in rds format

```{r}
write_rds(NGA_wp, "data/rds/NGA_wp.rds")
```
